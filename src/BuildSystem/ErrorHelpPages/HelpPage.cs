
using Starcounter.Errors;
using System;
using System.IO;
using System.Text;

namespace ErrorHelpPages {
    /// <summary>
    /// Expose a set of methods that allow modification of help page
    /// content.
    /// </summary>
    public static class HelpPage {
        public const string DefaultRemarksIfNotGiven = "_There is currently no further description available._";

        /// <summary>
        /// Writes the content to a new help page, based on the given
        /// template.
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="template"></param>
        public static void Write(StreamWriter writer, ErrorCode error, HelpPageTemplate template) {

            writer.WriteLine(HelpPageTemplate.Tokens.MetadataStart);
            foreach (var line in template.Metadata) {
                writer.WriteLine(ExpandMetadata(line, template));
            }
            writer.WriteLine(HelpPageTemplate.Tokens.MetadataStop);

            writer.WriteLine(HelpPageTemplate.Tokens.AutoGeneratedContentStart);
            foreach (var line in template.AutoGenerated) {
                writer.WriteLine(ExpandContent(line, error, template));
            }
            writer.WriteLine(HelpPageTemplate.Tokens.AutoGeneratedContentStop);

            foreach (var line in template.UserContent) {
                writer.WriteLine(ExpandContent(line, error, template));
            }
        }

        static string ExpandMetadata(string line, HelpPageTemplate template) {
            if (line.Contains(HelpPageTemplate.Variables.DELIMITER)) {
                line = line.Replace(HelpPageTemplate.MetadataVariables.MetadataSum, CreateChecksum(template.Metadata).ToString());
                line = line.Replace(HelpPageTemplate.MetadataVariables.AutoContentSum, CreateChecksum(template.AutoGenerated).ToString());
                line = line.Replace(HelpPageTemplate.MetadataVariables.UserContentSum, CreateChecksum(template.UserContent).ToString());
            }
            return line;
        }

        static int CreateChecksum(string[] content) {
            // Currently, we just do a really sloppy checksumming thing,
            // basing it on the total number of chars in the given content.
            // Since it's not sure if we'll ever need this, we want to
            // do just the simplest possible.
            int sum = 0;
            for (int i = 0; i < content.Length; sum += content[i].Length, i++) ;
            return sum + content.Length;
        }

        static string ExpandContent(string line, ErrorCode error, HelpPageTemplate template) {
            if (line.Contains(HelpPageTemplate.Variables.DELIMITER)) {
                line = line.Replace(HelpPageTemplate.Variables.ErrorCode, error.CodeWithFacility.ToString());
                line = line.Replace(HelpPageTemplate.Variables.ErrorCodeHex, string.Format("0x{0}", error.CodeWithFacility.ToString("X")));
                line = line.Replace(HelpPageTemplate.Variables.ErrorCodeDecorated, string.Format("SCERR{0}", error.CodeWithFacility.ToString()));
                line = line.Replace(HelpPageTemplate.Variables.ErrorId, error.Name);
                line = line.Replace(HelpPageTemplate.Variables.ErrorCategory, error.Facility.Name);
                line = line.Replace(HelpPageTemplate.Variables.ErrorSeverity, Enum.GetName(typeof(Severity), error.Severity));
                line = line.Replace(HelpPageTemplate.Variables.ErrorMessage, error.Description);
                if (line.Contains(HelpPageTemplate.Variables.Remarks) || line.Contains(HelpPageTemplate.Variables.RemarksOrDefault)) {
                    line = ExpandRemarks(line, error);
                }
            }
            return line;
        }

        static string ExpandRemarks(string line, ErrorCode error) {
            var hasRemarks = error.RemarkParagraphs != null && error.RemarkParagraphs.Count > 0;
            var expansion = new StringBuilder();
            var remarks = string.Empty;

            if (hasRemarks) {
                foreach (var x in error.RemarkParagraphs) {
                    expansion.AppendFormat("{0}<br><br>", x);
                }
                remarks = expansion.ToString();
            }

            line = line.Replace(HelpPageTemplate.Variables.Remarks, remarks);
            line = line.Replace(HelpPageTemplate.Variables.RemarksOrDefault, remarks == string.Empty ? HelpPage.DefaultRemarksIfNotGiven : remarks);

            return line;
        }
    }
}