// Generated code. This code serializes and deserializes Typed Json. The code was generated by Starcounter.

using System;
using Starcounter;
using Starcounter.Internal;
using Starcounter.Internal.JsonPatch;

namespace __testing__ {
    public static class ZApapap{

        #pragma warning disable 0414
        private static int VerificationOffset0 = 0; // Kid
        private static int VerificationOffset1 = 3; // Page
        private static int VerificationOffset2 = 7; // PlayerId
        private static int VerificationOffset3 = 15; // FullName
        private static int VerificationOffset4 = 23; // Accounts
        #pragma warning restore 0414
        private static byte[] VerificationBytes = new byte[] {(byte)'K',(byte)'i',(byte)'d',(byte)'P',(byte)'a',(byte)'g',(byte)'e',(byte)'P',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'I',(byte)'d',(byte)'F',(byte)'u',(byte)'l',(byte)'l',(byte)'N',(byte)'a',(byte)'m',(byte)'e',(byte)'A',(byte)'c',(byte)'c',(byte)'o',(byte)'u',(byte)'n',(byte)'t',(byte)'s'};
        private static IntPtr PointerVerificationBytes;

        static ZApapap() {
            PointerVerificationBytes = BitsAndBytes.Alloc(VerificationBytes.Length); // TODO. Free when program exists
            BitsAndBytes.SlowMemCopy( PointerVerificationBytes, VerificationBytes, (uint)VerificationBytes.Length);
        }

        public static int Serialize(IntPtr buffer, int bufferSize, dynamic obj) {
            int valueSize;
            Obj childObj;
            unsafe {
                byte* pBuffer = (byte*)buffer;
                byte* pver = null;
                int leftBufferSize = bufferSize;
                if ((leftBufferSize - 2) < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= 2;
                *pBuffer++ = (byte)'{';
                valueSize = JsonHelper.WriteString((IntPtr)pBuffer, leftBufferSize, "Kid");
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)':';
                childObj = obj.Kid;
                if (childObj == null)
                    valueSize = JsonHelper.WriteNull((IntPtr)pBuffer, leftBufferSize);
                else
                    valueSize = obj.ToJson((IntPtr)pBuffer, leftBufferSize);
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)',';
                valueSize = JsonHelper.WriteString((IntPtr)pBuffer, leftBufferSize, "Page");
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)':';
                childObj = obj.Page;
                if (childObj == null)
                    valueSize = JsonHelper.WriteNull((IntPtr)pBuffer, leftBufferSize);
                else
                    valueSize = obj.ToJson((IntPtr)pBuffer, leftBufferSize);
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)',';
                valueSize = JsonHelper.WriteString((IntPtr)pBuffer, leftBufferSize, "PlayerId");
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)':';
                valueSize = JsonHelper.WriteInt((IntPtr)pBuffer, leftBufferSize, obj.PlayerId);
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)',';
                valueSize = JsonHelper.WriteString((IntPtr)pBuffer, leftBufferSize, "FullName");
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)':';
                valueSize = JsonHelper.WriteString((IntPtr)pBuffer, leftBufferSize, obj.FullName);
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)',';
                valueSize = JsonHelper.WriteString((IntPtr)pBuffer, leftBufferSize, "Accounts");
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)':';
                if ((leftBufferSize - 2) < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)'[';
                leftBufferSize -= 2;
                for(int i = 0; i < obj.Accounts.Count; i++) {
                    childObj = obj.Accounts[i];
                if (childObj == null)
                    valueSize = JsonHelper.WriteNull((IntPtr)pBuffer, leftBufferSize);
                else
                    valueSize = obj.ToJson((IntPtr)pBuffer, leftBufferSize);
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                    if ((i+1) < obj.Accounts.Count) {
                        leftBufferSize--;
                        if (leftBufferSize < 0)
                            throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                        *pBuffer++ = (byte)',';
                    }
                }
                *pBuffer++ = (byte)']';
                *pBuffer++ = (byte)'}';
                return (bufferSize - leftBufferSize);
            }
        }
    }
}
