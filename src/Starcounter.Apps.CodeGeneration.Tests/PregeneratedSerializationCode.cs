// Generated code. This code serializes and deserializes Typed Json. The code was generated by Starcounter.

using System;
using Starcounter;
using Starcounter.Internal;
using Starcounter.Internal.JsonPatch;

namespace __starcountergenerated__ {
    public class Serializer : CodegeneratedJsonSerializer {

        #pragma warning disable 0414
        private static int VerificationOffset0 = 0; // PlayerId
        private static int VerificationOffset1 = 8; // Accounts
        #pragma warning restore 0414
        private static byte[] VerificationBytes = new byte[] {(byte)'P',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'I',(byte)'d',(byte)'A',(byte)'c',(byte)'c',(byte)'o',(byte)'u',(byte)'n',(byte)'t',(byte)'s'};
        private static IntPtr PointerVerificationBytes;

        public Serializer() {
            PointerVerificationBytes = BitsAndBytes.Alloc(VerificationBytes.Length); // TODO. Free when program exists
            BitsAndBytes.SlowMemCopy( PointerVerificationBytes, VerificationBytes, (uint)VerificationBytes.Length);
        }

        public override int Serialize(IntPtr buffer, int bufferSize, dynamic obj) {
            int valueSize;
            Obj childObj;
            unsafe {
                byte* pBuffer = (byte*)buffer;
                byte* pver = null;
                int leftBufferSize = bufferSize;
                if ((leftBufferSize - 2) < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= 2;
                *pBuffer++ = (byte)'{';
                valueSize = JsonHelper.WriteString((IntPtr)pBuffer, leftBufferSize, "PlayerId");
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)':';
                valueSize = JsonHelper.WriteInt((IntPtr)pBuffer, leftBufferSize, obj.PlayerId);
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)',';
                valueSize = JsonHelper.WriteString((IntPtr)pBuffer, leftBufferSize, "Accounts");
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                leftBufferSize--;
                if (leftBufferSize < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)':';
                if ((leftBufferSize - 2) < 0)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                *pBuffer++ = (byte)'[';
                leftBufferSize -= 2;
                for(int i = 0; i < obj.Accounts.Count; i++) {
                    childObj = obj.Accounts[i];
                if (childObj == null)
                    valueSize = JsonHelper.WriteNull((IntPtr)pBuffer, leftBufferSize);
                else
                    valueSize = childObj.ToJson((IntPtr)pBuffer, leftBufferSize);
                if (valueSize == -1)
                    throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                leftBufferSize -= valueSize;
                pBuffer += valueSize;
                    if ((i+1) < obj.Accounts.Count) {
                        leftBufferSize--;
                        if (leftBufferSize < 0)
                            throw ErrorCode.ToException(Starcounter.Error.SCERRUNSPECIFIED);
                        *pBuffer++ = (byte)',';
                    }
                }
                *pBuffer++ = (byte)']';
                *pBuffer++ = (byte)'}';
                return (bufferSize - leftBufferSize);
            }
        }
        public override int Populate(IntPtr buffer, int bufferSize, dynamic obj) {
            int valueSize;
            unsafe {
                byte* pBuffer = (byte*)buffer;
                byte* pver = null;
                int leftBufferSize = bufferSize;
                while (leftBufferSize > 0) {
                    // Skip until start of next property or end of current object.
                    while (true) {
                        if (*pBuffer == '"')
                            break;
                        if (*pBuffer == '}') {
                            pBuffer++;
                            leftBufferSize--;
                            return (bufferSize - leftBufferSize);
                        }
                        pBuffer++;
                        leftBufferSize--;
                        if (leftBufferSize < 0)
                             throw new Exception("Deserialization failed.");
                    }
                    pBuffer++;
                    leftBufferSize--;
                    if (leftBufferSize < 0)
                        throw new Exception("Deserialization failed.");
                    switch (*pBuffer) {
                        case (byte)'P':
                            pBuffer++;
                            leftBufferSize--;
                            // Skip until start of value to parse.
                            while (*pBuffer != ':') {
                                pBuffer++;
                                leftBufferSize--;
                                if (leftBufferSize < 0)
                                     throw new Exception("Deserialization failed.");
                            }
                            pBuffer++; // Skip ':' or ','
                            leftBufferSize--;
                            if (leftBufferSize < 0)
                                throw new Exception("Deserialization failed.");
                            while (*pBuffer == ' ' || *pBuffer == '\n' || *pBuffer == '\r') {
                                pBuffer++;
                                leftBufferSize--;
                                if (leftBufferSize < 0)
                                     throw new Exception("Deserialization failed.");
                            }
                            Int64 val0;
                            if (JsonHelper.ParseInt((IntPtr)pBuffer, leftBufferSize, out val0, out valueSize)) {
                                obj.PlayerId = val0;
                                leftBufferSize -= valueSize;
                                if (leftBufferSize < 0) {
                                    throw new Exception("Unable to deserialize App. Unexpected end of content");
                                }
                                pBuffer += valueSize;
                            } else {
                                throw new Exception("Unable to deserialize App. Content not compatible.");
                            }
                           break;
                        case (byte)'A':
                            pBuffer++;
                            leftBufferSize--;
                            // Skip until start of value to parse.
                            while (*pBuffer != ':') {
                                pBuffer++;
                                leftBufferSize--;
                                if (leftBufferSize < 0)
                                     throw new Exception("Deserialization failed.");
                            }
                            pBuffer++; // Skip ':' or ','
                            leftBufferSize--;
                            if (leftBufferSize < 0)
                                throw new Exception("Deserialization failed.");
                            while (*pBuffer == ' ' || *pBuffer == '\n' || *pBuffer == '\r') {
                                pBuffer++;
                                leftBufferSize--;
                                if (leftBufferSize < 0)
                                     throw new Exception("Deserialization failed.");
                            }
                            if (*pBuffer++ == '[') {
                                leftBufferSize--;
                                while (*pBuffer != '{' && *pBuffer != ']') { // find first object or end of array
                                    pBuffer++;
                                    leftBufferSize--;
                                }
                                if (*pBuffer != ']') {
                                while (leftBufferSize > 0) {
                                    var val1 = obj.Accounts.Add();
                                    valueSize =  val1.Populate((IntPtr)pBuffer, leftBufferSize);
                                    if (valueSize != -1) {
                                        leftBufferSize -= valueSize;
                                        if (leftBufferSize < 0) {
                                            throw new Exception("Unable to deserialize App. Unexpected end of content");
                                        }
                                        pBuffer += valueSize;
                                    } else {
                                        throw new Exception("Unable to deserialize App. Content not compatible.");
                                    }
                                        // Skip until start of value to parse.
                                        while (*pBuffer != ',') {
                                            if (*pBuffer == ']')
                                                break;
                                            pBuffer++;
                                            leftBufferSize--;
                                            if (leftBufferSize < 0)
                                                 throw new Exception("Deserialization failed.");
                                        }
                                        if (*pBuffer == ']')
                                            break;
                                        pBuffer++; // Skip ':' or ','
                                        leftBufferSize--;
                                        if (leftBufferSize < 0)
                                            throw new Exception("Deserialization failed.");
                                        while (*pBuffer == ' ' || *pBuffer == '\n' || *pBuffer == '\r') {
                                            pBuffer++;
                                            leftBufferSize--;
                                            if (leftBufferSize < 0)
                                                 throw new Exception("Deserialization failed.");
                                        }
                                }
                                }
                            } else
                                throw new Exception("Invalid array value");
                           break;
                        default:
                            throw new Exception("Property not belonging to this app found in content.");
                    }
                }
            }
            throw new Exception("Deserialization of App failed.");
        }
    }
}
