<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:messagebox="clr-namespace:Starcounter.Controls;assembly=Starcounter.Controls.WpfMessageBox">

    <!-- ## WpfMessageBox ## -->
    <Style TargetType="{x:Type messagebox:WpfMessageBox}">
        <Setter Property="Background" Value="#ff202020" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />

    <!-- ## BUTTON ## -->

    <!-- STYLE: ButtonStyle -->
    <Style x:Key="ButtonStyle" TargetType="{x:Type ButtonBase}">
        <!--<Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonStyleFocusVisual}"/>-->
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="#20ffffff"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="Padding" Value="5,1,5,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">

                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type Image}">
                            <Style.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>

                        <Storyboard x:Key="TestFocusStoryBoard">
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="0:0:0.8" AutoReverse="True" RepeatBehavior="Forever" />
                        </Storyboard>
                        
                    </ControlTemplate.Resources>

                    <Grid>

                        <Border x:Name="IsDefaultOverlay"  BorderBrush="#60ffffff" BorderThickness="1" CornerRadius="0" Visibility="Collapsed" />

                        <Border Background="{TemplateBinding Background}" Opacity="1" BorderBrush="#00000000" BorderThickness="1" CornerRadius="0"/>

                        <Grid Margin="8,4,8,5">
                            <ContentPresenter ContentSource="Content" RecognizesAccessKey="True" TextBlock.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}"   SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>

                        <Border x:Name="focusedOverlay" Margin="0" Opacity="0.5" BorderBrush="#ffffffff" BorderThickness="1" Visibility="Collapsed">
                            <Border.Triggers>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard Storyboard="{DynamicResource TestFocusStoryBoard}" />
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </Border.Triggers>
                        </Border>


                        <Border x:Name="downOverlay" Background="Transparent" Opacity="1" BorderThickness="1" CornerRadius="0"/>
                        <Border x:Name="disabledOverlay" Background="#00000000" Opacity="1" BorderThickness="1" CornerRadius="0" Visibility="Collapsed"/>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="true"/>
                                <Condition Property="IsKeyboardFocused" Value="false"/>
                                <Condition Property="Button.IsDefault" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="IsDefaultOverlay"  />
                        </MultiTrigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Visibility" Value="Visible"  />
                        </Trigger>

                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter Property="Background" Value="#40000000" TargetName="downOverlay"   />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#20ffffff"  />
                            <Setter Property="Visibility" Value="Visible" TargetName="disabledOverlay"   />
                        </Trigger>

                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="focusedOverlay"   />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonStyle}"/>
    
    <!-- STYLE: ButtonBarBaseStyleFocusVisual -->
    <Style x:Key="ButtonStyleFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="TestFocusStoryBoard">
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="0:0:0.8" AutoReverse="True" RepeatBehavior="Forever" />
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Border Margin="0" Opacity="0.5" BorderBrush="#ffffffff" BorderThickness="1" CornerRadius="0">
                        <Border.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <EventTrigger.Actions>
                                    <BeginStoryboard Storyboard="{DynamicResource TestFocusStoryBoard}" />
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Border.Triggers>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ## ToggleButton ## -->

    <!-- ToggleButtonStyle -->
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ButtonStyle}" />


    <!-- ### ComboBox ### -->

    <!-- ToggleButtonInComboBoxStyle -->
    <Style x:Key="ToggleButtonInComboBoxStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource ButtonStyle}">
    </Style>

    <!-- ComboBoxStyle -->
    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="#20ffffff"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ThemeColorBrush1}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="{DynamicResource StandardMargin}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>

        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <!-- Toggle button -->
                        <ToggleButton Margin="0" Grid.Column="0" Content="" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{DynamicResource ToggleButtonInComboBoxStyle}" Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" />

                        <!-- Text -->
                        <Border Margin="{TemplateBinding Padding}" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter Margin="4,0,1,0"  Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" HorizontalAlignment="Left" />
                        </Border>

                        <!-- Arrow -->
                        <Border Grid.Column="1">
                            <Path x:Name="Down_Arrow" Margin="0,1,8,0" IsHitTestVisible="False" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 8 L 8 0 Z" />
                        </Border>

                        <!-- Editable text -->
                        <TextBox  BorderBrush="Transparent"  MinWidth="0" Grid.Column="0" HorizontalAlignment="Stretch" Margin="4,3,5,3" Padding="1,-1,1,-1"   x:Name="PART_EditableTextBox"  Foreground="{TemplateBinding Foreground}"  VerticalAlignment="Center"  Focusable="True"  Visibility="Collapsed" IsEnabled="{TemplateBinding IsEnabled}" IsReadOnly="{TemplateBinding IsReadOnly}">
                            <TextBox.Resources>
                                <SolidColorBrush x:Key="TextBoxBackground" Color="#ff000000"/>

                                <LinearGradientBrush x:Key="TextBoxOverlay"  StartPoint="0.5,0" EndPoint="0.5,1">
                                    <GradientStop Color="#00000000" Offset="0"/>
                                    <GradientStop Color="#00000000" Offset="1"/>
                                </LinearGradientBrush>

                            </TextBox.Resources>
                        </TextBox>

                        <Popup  Name="PART_Popup" Placement="Bottom" VerticalOffset="2"  HorizontalOffset="-3" IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Grid x:Name="DropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}">

                                <!-- Shadow -->
                                <Grid Margin="0,7,0,1" >

                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Grid.Row="1" Grid.Column="1" >
                                        <Rectangle.Fill>
                                            <SolidColorBrush  Color="{DynamicResource ShadowedBoxInnerShadow}" />
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <!-- Top Left Corner Shadow -->
                                    <Rectangle Grid.Row="0" Grid.Column="0" >
                                        <Rectangle.Fill>
                                            <RadialGradientBrush>
                                                <RadialGradientBrush.RelativeTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="2" ScaleY="2"/>
                                                        <TranslateTransform X="0.5" Y="0.5"/>
                                                    </TransformGroup>
                                                </RadialGradientBrush.RelativeTransform>
                                                <GradientStop Color="{DynamicResource ShadowedBoxInnerShadow}" Offset="0"/>
                                                <GradientStop Color="{DynamicResource ShadowedBoxOuterShadow}" Offset="1"/>
                                            </RadialGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <!-- Top Shadow -->
                                    <Rectangle Grid.Column="1"  Grid.Row="0"  Height="7" >
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="0.5,0" StartPoint="0.5,1">
                                                <GradientStop Color="{DynamicResource ShadowedBoxInnerShadow}" Offset="0"/>
                                                <GradientStop Color="{DynamicResource ShadowedBoxOuterShadow}" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <!-- Right Shadow -->
                                    <Rectangle Grid.Column="0" Grid.Row="1"   Width="7" >
                                        <Rectangle.Fill>
                                            <LinearGradientBrush StartPoint="1,1" EndPoint="0,1" >
                                                <GradientStop Color="{DynamicResource ShadowedBoxInnerShadow}" Offset="0"/>
                                                <GradientStop Color="{DynamicResource ShadowedBoxOuterShadow}" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <!-- Bottom Left Corner Shadow -->
                                    <Rectangle Grid.Row="2" Grid.Column="0" >
                                        <Rectangle.Fill>
                                            <RadialGradientBrush>
                                                <RadialGradientBrush.RelativeTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="2" ScaleY="2"/>
                                                        <TranslateTransform X="0.5" Y="-0.5"/>
                                                    </TransformGroup>
                                                </RadialGradientBrush.RelativeTransform>
                                                <GradientStop Color="{DynamicResource ShadowedBoxInnerShadow}" Offset="0"/>
                                                <GradientStop Color="{DynamicResource ShadowedBoxOuterShadow}" Offset="1"/>
                                            </RadialGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <!-- Top Right Corner Shadow -->
                                    <Rectangle Grid.Row="0" Grid.Column="2" >
                                        <Rectangle.Fill>
                                            <RadialGradientBrush>
                                                <RadialGradientBrush.RelativeTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="2" ScaleY="2"/>
                                                        <TranslateTransform X="-0.5" Y="0.5"/>
                                                    </TransformGroup>
                                                </RadialGradientBrush.RelativeTransform>
                                                <GradientStop Color="{DynamicResource ShadowedBoxInnerShadow}" Offset="0"/>
                                                <GradientStop Color="{DynamicResource ShadowedBoxOuterShadow}" Offset="1"/>
                                            </RadialGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <!-- Bottom Shadow -->
                                    <Rectangle Grid.Column="1" Grid.Row="2"  Height="7" >
                                        <Rectangle.Fill>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="{DynamicResource ShadowedBoxInnerShadow}" Offset="0"/>
                                                <GradientStop Color="{DynamicResource ShadowedBoxOuterShadow}" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <!-- Right shadow -->
                                    <Rectangle Grid.Row="1"  Grid.Column="2" Width="7" >
                                        <Rectangle.Fill>
                                            <LinearGradientBrush StartPoint="0,1" EndPoint="1,1" >
                                                <GradientStop Color="{DynamicResource ShadowedBoxInnerShadow}" Offset="0"/>
                                                <GradientStop Color="{DynamicResource ShadowedBoxOuterShadow}" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <!-- Bottom Right Corner Shadow -->
                                    <Rectangle Grid.Row="2" Grid.Column="2" >
                                        <Rectangle.Fill>
                                            <RadialGradientBrush>
                                                <RadialGradientBrush.RelativeTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="2" ScaleY="2"/>
                                                        <TranslateTransform X="-0.5" Y="-0.5"/>
                                                    </TransformGroup>
                                                </RadialGradientBrush.RelativeTransform>
                                                <GradientStop Color="{DynamicResource ShadowedBoxInnerShadow}" Offset="0"/>
                                                <GradientStop Color="{DynamicResource ShadowedBoxOuterShadow}" Offset="1"/>
                                            </RadialGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Grid>

                                <Border Margin="3,0,3,7" MinWidth="{Binding ElementName=ToggleButton, Path=ActualWidth}" Name="SubmenuBorder" CornerRadius="0" Background="#ff202020" BorderBrush="#ff404040" BorderThickness="1">
                                    <ScrollViewer>
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>

                        <Border x:Name="FocusOverlay"  Visibility="Collapsed" CornerRadius="3" Grid.ColumnSpan="2"  BorderBrush="{DynamicResource ThemeColorBrush8}" BorderThickness="{TemplateBinding BorderThickness}" />

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="FocusOverlay" />
                        </Trigger>

                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>

                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>

                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>

                        <Trigger Property="IsReadOnly" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Background" Value="Transparent"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ThemeColorBrush5}"/>
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>

                    <ControlTemplate.Resources>

                        <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />

                        <Style x:Key="errorOrWarning" TargetType="{x:Type Rectangle}">
                            <Style.Triggers>

                                <!-- Error -->
                                <DataTrigger Binding="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent.IsError}"  Value="{x:Null}">
                                    <Setter Property="Fill" Value="#FFAC2525" />
                                </DataTrigger>

                                <!-- Error (Using Error Object) -->
                                <DataTrigger Binding="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent.IsError}"  Value="true">
                                    <Setter Property="Fill" Value="#FFAC2525" />
                                </DataTrigger>

                                <!-- Warning (Using Error Object) -->
                                <DataTrigger Binding="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent.IsError}"  Value="false">
                                    <Setter Property="Fill" Value="#FFFFD700" />
                                </DataTrigger>

                            </Style.Triggers>
                        </Style>

                    </ControlTemplate.Resources>

                    <DockPanel LastChildFill="True" Visibility="{Binding ElementName=MyAdorner, Mode=OneWay, Path=AdornedElement.IsEnabled, Converter={StaticResource booleanToVisibilityConverter}}">
                        <Rectangle Style="{DynamicResource errorOrWarning}" VerticalAlignment="Top" Margin="2.5,8,5,2.5" Width="10" Height="10" RadiusX="5" RadiusY="5" ToolTip="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                        <AdornedElementPlaceholder Name="MyAdorner"/>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
            </Trigger>

        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxStyle}" />

    <!-- StarcounterListBoxItemFocusVisual -->
    <Style x:Key="StarcounterListBoxItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="TestFocusStoryBoard">
                            <DoubleAnimation  Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="0:0:0.8" AutoReverse="True" RepeatBehavior="Forever" />
                        </Storyboard>
                        <SolidColorBrush x:Key="ThemeColor" Color="#FFFF5500"/>
                    </ControlTemplate.Resources>

                    <Rectangle Margin="0,0,0,0" StrokeThickness="1" Stroke="{DynamicResource ThemeColor}" RadiusX="0" RadiusY="0" >
                        <Rectangle.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <EventTrigger.Actions>
                                    <BeginStoryboard Storyboard="{DynamicResource TestFocusStoryBoard}" />
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Rectangle.Triggers>
                    </Rectangle>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- StarcounterComboBoxItemStyle_WorkingInXamlPad -->
    <Style x:Key="StarcounterComboBoxItemStyle_WorkingInXamlPad" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource StarcounterListBoxItemFocusVisual}"/>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="6,2,6,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">

                    <Grid Background="Transparent"  >
                        <Border x:Name="bg"  />

                        <ContentPresenter Margin="{TemplateBinding Padding}" />
                        <!-- Focus Border -->
                        <Border x:Name="FocusOverlay"  Visibility="Collapsed" CornerRadius="0"  BorderBrush="Red" BorderThickness="{TemplateBinding BorderThickness}" />


                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="FocusOverlay"/>
                        </Trigger>

                        <Trigger Property="ButtonBase.IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="FocusOverlay"/>
                        </Trigger>

                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{DynamicResource ThemeColorBrush8}" />
                            <Setter Property="Background" Value="{DynamicResource ThemeColorBrush8}" TargetName="bg"/>
                            <Setter Property="Opacity" Value="0.3" TargetName="bg"/>
                            <!--                           <Setter Property="Visibility" Value="Visible" TargetName="FocusBorder"/>  -->

                            <!--                           <Setter Property="Background" Value="{DynamicResource ThemeColorBrush7}" TargetName="InnerPart"/> -->
                            <!--                          <Setter Property="Background" Value="{DynamicResource SelectedRowBackground}"/> -->
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- StarcounterComboBoxItemStyle -->
    <Style x:Key="StarcounterComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource StarcounterListBoxItemFocusVisual}"/>
        <!--        <Setter Property="Foreground" Value="{DynamicResource ThemeColorBrush7}" /> -->
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="10,2,6,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid Background="Transparent"  >
                        <Border x:Name="bg" />
                        <ContentPresenter Margin="{TemplateBinding Padding}" />
                        <!-- Focus Border -->
                        <Border x:Name="FocusOverlay"  Visibility="Collapsed" CornerRadius="0"  BorderBrush="{DynamicResource ThemeColorBrush8}" BorderThickness="{TemplateBinding BorderThickness}" />


                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="FocusOverlay"/>
                        </Trigger>

                        <Trigger Property="ButtonBase.IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="FocusOverlay"/>
                        </Trigger>

                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{DynamicResource ThemeColor}" TargetName="bg"/>
                            <Setter Property="Opacity" Value="0.3" TargetName="bg"/>
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource StarcounterComboBoxItemStyle}" />

    <!-- ## TextBox ## -->

    <!-- TextBoxStyle -->
    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}" >
        <Setter Property="FocusVisualStyle" Value="{DynamicResource TextBoxStyleFocusVisual}"/>
        <Setter Property="Background" Value="#ff101010"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Padding" Value="0,2,0,2"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">

                    <Grid >


                        <!-- Outerborder -->
                        <Border IsHitTestVisible="False"   >
                            <Grid>
                                <Border IsHitTestVisible="False" BorderBrush="#00000000" BorderThickness="0,0,0,0" Margin="0,1,0,1" Background="{TemplateBinding Background}" CornerRadius="0" />
                                <Border IsHitTestVisible="False" x:Name="shadow" BorderBrush="#20000000" BorderThickness="0,1,0,0"  CornerRadius="0,0,0,0" Padding="0" Background="Transparent" Height="6" VerticalAlignment="Top" />
                                <Border IsHitTestVisible="False" x:Name="highlight" BorderBrush="#00ffffff" BorderThickness="0,0,0,1"  CornerRadius="0,0,0,0" Padding="0" Background="Transparent" Height="6" VerticalAlignment="Bottom"/>
                            </Grid>
                        </Border>

                        <Grid x:Name="cp" Margin="4,3,4,4" >
                            <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>

                    </Grid>


                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#00000000"  />
                            <Setter Property="Foreground" Value="#ff888888"  />
                            <Setter Property="BorderBrush" Value="#00000000" />
                            <Setter Property="Focusable" Value="false" />
                        </Trigger>

                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Background" Value="#30000000"  />
                            <Setter Property="Foreground" Value="#ffd0d0d0"  />
                            <Setter Property="BorderBrush" Value="#00000000" />
                        </Trigger>


                        <!--
                          <MultiTrigger>
                              <MultiTrigger.Conditions>
                                  <Condition Property="IsKeyboardFocused" Value="true"/>
                                  <Condition Property="IsReadOnly" Value="false" />
                              </MultiTrigger.Conditions>
                              <Setter Property="Background" Value="{DynamicResource TextBoxSelectedOverlay}" TargetName="bg"/>
                          </MultiTrigger>
                          -->

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>

                    <ControlTemplate.Resources>

                        <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />

                        <Style x:Key="errorOrWarning" TargetType="{x:Type Rectangle}">
                            <Style.Triggers>

                                <!-- Error -->
                                <DataTrigger Binding="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent.IsError}"  Value="{x:Null}">
                                    <Setter Property="Fill" Value="#FFAC2525" />
                                </DataTrigger>

                                <!-- Error (Using Error Object) -->
                                <DataTrigger Binding="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent.IsError}"  Value="true">
                                    <Setter Property="Fill" Value="#FFAC2525" />
                                </DataTrigger>

                                <!-- Warning (Using Error Object) -->
                                <DataTrigger Binding="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors).CurrentItem.ErrorContent.IsError}"  Value="false">
                                    <Setter Property="Fill" Value="#FFFFD700" />
                                </DataTrigger>



                            </Style.Triggers>
                        </Style>

                    </ControlTemplate.Resources>

                    <DockPanel LastChildFill="True" Visibility="{Binding ElementName=MyAdorner, Mode=OneWay, Path=AdornedElement.IsEnabled, Converter={StaticResource booleanToVisibilityConverter}}">
                        <Rectangle
                Style="{DynamicResource errorOrWarning}"
                VerticalAlignment="Top"
                Margin="2.5,8,5,2.5"
                Width="10"
                Height="10"
                RadiusX="5"
                RadiusY="5"
                ToolTip="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                              />



                        <AdornedElementPlaceholder Name="MyAdorner"/>

                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>


            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
            </Trigger>

        </Style.Triggers>

    </Style>

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyle}" />

    <!-- STYLE: TextBoxStyleFocusVisual -->
    <Style x:Key="TextBoxStyleFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="TestFocusStoryBoard">
                            <DoubleAnimation  Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="0:0:0.8" AutoReverse="True" RepeatBehavior="Forever" />
                        </Storyboard>

                    </ControlTemplate.Resources>

                    <Border Margin="0" Opacity="0.5" BorderBrush="#ffffffff" BorderThickness="1" CornerRadius="0">

                        <Border.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <EventTrigger.Actions>
                                    <BeginStoryboard Storyboard="{DynamicResource TestFocusStoryBoard}" />
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Border.Triggers>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- STYLE: TextBoxBorderlessStyle -->
    <Style x:Key="TextBoxBorderlessStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource TextBoxStyleFocusVisual}"/>
        <Setter Property="Background" Value="#00000000"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Padding" Value="0,2,0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>

                        <Border Opacity="1" BorderThickness="1" CornerRadius="3"/>

                        <Grid x:Name="cp" Margin="4,4,4,5" Background="{TemplateBinding Background}" >
                            <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>

                    </Grid>


                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Focusable" Value="false" />
                        </Trigger>

                        <Trigger Property="IsReadOnly" Value="True">
                        </Trigger>




                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ## CHECKBOX ## -->

    <!-- CheckBoxStyle -->
    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}" >
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxStyleFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ThemeColor}"/>
        <Setter Property="BorderBrush" Value="#40000000"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0,1,0,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <Grid  Margin="{TemplateBinding Margin}"  VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Box" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Content"/>
                        </Grid.ColumnDefinitions>

                        <Border Margin="0,0,10,0"  Padding="0,0,0,0" VerticalAlignment="Center" >
                            <Grid>
                                <Border x:Name="main" Background="#20ffffff" Opacity="1" BorderBrush="#00000000" BorderThickness="1"  CornerRadius="0"/>

                                <Border x:Name="downOverlay" Background="Transparent" Opacity="1" BorderThickness="1" CornerRadius="0"/>
                                <Border x:Name="disabledOverlay" Background="#40000000" Opacity="1" BorderThickness="0" CornerRadius="0" Visibility="Collapsed"/>

                                <Grid x:Name="cp"  Margin="{TemplateBinding Padding}" Width="20" Height="20">
                                    <Path Name="CheckMark" Opacity="1" Data="M 0 5 L 3 10 10 0" Stroke="#FF319031" StrokeThickness="2">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
                                                <TranslateTransform X="4" Y="-3"/>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>

                            </Grid>
                        </Border>

                        <!-- Content -->
                        <Border Grid.Column="1" Margin="0,0,0,0" VerticalAlignment="Center"   >
                            <ContentPresenter Margin="0" RecognizesAccessKey="True" TextBlock.Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter Property="Background" Value="#40000000" TargetName="downOverlay"   />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter Property="Visibility" Value="Collapsed" TargetName="main"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="downOverlay"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="disabledOverlay"/>
                            <Setter Property="Opacity" Value="0.6" TargetName="cp"/>

                        </Trigger>

                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>

                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="BigCheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource CheckBoxStyle}">
        <Setter Property="FontSize" Value="14"/>
    </Style>


    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource CheckBoxStyle}" />

    <!-- ## Scrollbar ## -->

    <!-- ScrollBarLineButton -->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}" >
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonStyleFocusVisual}"/>
        <Setter Property="Background" Value="#15ffffff"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">

                    <!-- Scrollbarbutton -->

                    <Grid >
                        <Border x:Name="IsDefaultOverlay"  BorderBrush="#5077aaff" BorderThickness="1" CornerRadius="5" Visibility="Collapsed" >
                            <Border.Effect>
                                <BlurEffect Radius="2"  />
                            </Border.Effect>
                        </Border>

                        <Border Background="{TemplateBinding Background}" Opacity="1" BorderThickness="1" CornerRadius="0"/>

                        <Grid x:Name="cp" Margin="0">
                            <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="{Binding Path=Content,RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid>

                        <Border x:Name="downOverlay" Background="Transparent" Opacity="1" BorderThickness="1" CornerRadius="0"/>


                    </Grid>

                    <ControlTemplate.Triggers>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="true"/>
                                <Condition Property="IsKeyboardFocused" Value="false"/>
                                <Condition Property="Button.IsDefault" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="IsDefaultOverlay"  />
                        </MultiTrigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Visibility" Value="Visible"  />
                        </Trigger>

                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter Property="Background" Value="#40000000" TargetName="downOverlay"   />
                        </Trigger>



                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#00000000"  />
                            <Setter Property="Foreground" Value="#ff888888"  />
                            <Setter Property="BorderBrush" Value="#00000000" />
                        </Trigger>


                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ScrollBarPageButton -->
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ScrollBarThumb -->
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonStyleFocusVisual}"/>
        <Setter Property="Background" Value="#15ffffff"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollBar.Orientation" Value="Vertical"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <!-- Scrollbarbutton -->
                    <Grid  >
                        <Border x:Name="IsDefaultOverlay"  BorderBrush="#5077aaff" BorderThickness="1" CornerRadius="0" Visibility="Collapsed" >
                            <Border.Effect>
                                <BlurEffect Radius="2"  />
                            </Border.Effect>
                        </Border>

                        <Border Background="{TemplateBinding Background}" Opacity="1" BorderThickness="1" CornerRadius="0"/>
                        <Border x:Name="downOverlay" Background="Transparent" Opacity="1" BorderThickness="1" CornerRadius="0"/>

                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>

    <!-- VerticalScrollBar -->
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Border CornerRadius="{TemplateBinding Border.CornerRadius}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid >
                <Grid.RowDefinitions>
                    <RowDefinition MaxHeight="20"/>
                    <RowDefinition Height="0.00001*"/>
                    <RowDefinition MaxHeight="20"/>
                </Grid.RowDefinitions>

                <RepeatButton Foreground="{TemplateBinding Foreground}"  Margin="0" Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Command="ScrollBar.LineUpCommand" Content="M 0 3 L 6 3 L 3 0 Z" />

                <Track Name="PART_Track" Grid.Row="1" Margin="0" IsDirectionReversed="true">

                    <Track.DecreaseRepeatButton>
                        <RepeatButton  Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                    </Track.DecreaseRepeatButton>

                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,0,0,0"  />
                    </Track.Thumb>

                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>

                <RepeatButton  Foreground="{TemplateBinding Foreground}"  Margin="0" Grid.Row="3" Style="{StaticResource ScrollBarLineButton}"  Command="ScrollBar.LineDownCommand" Content="M 0 0 L 3 3 L 6 0 Z"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <!-- HorizontalScrollBar -->
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Border CornerRadius="{TemplateBinding Border.CornerRadius}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MaxWidth="20"/>
                    <ColumnDefinition Width="0.00001*"/>
                    <ColumnDefinition MaxWidth="20"/>
                </Grid.ColumnDefinitions>

                <RepeatButton Foreground="{TemplateBinding Foreground}"  Margin="0" Grid.Column="0" Style="{StaticResource ScrollBarLineButton}" Command="ScrollBar.LineLeftCommand" Content="M 3 0 L 3 6 L 0 3 Z" />

                <Track  Name="PART_Track" Margin="0,0,0,0" Grid.Column="1" IsDirectionReversed="False">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,0,0,0"  />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand"  />
                    </Track.IncreaseRepeatButton>
                </Track>

                <RepeatButton Foreground="{TemplateBinding Foreground}"  Margin="0" Grid.Column="3" Style="{StaticResource ScrollBarLineButton}" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 3 3 L 0 6 Z"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <!-- StarcounterScrollbarStyle -->
    <Style x:Key="StarcounterScrollbarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Background" Value="#00ff0000"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="#00ff0000"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="20" />
                <Setter Property="Border.CornerRadius" Value="0" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="20"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Border.CornerRadius" Value="0" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource StarcounterScrollbarStyle}" />

    <Style x:Key="BlackScrollbar" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource StarcounterScrollbarStyle}">
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Background" Value="#D0000000"/>
    </Style>


    <!-- ## Hyperlink ## -->

    <SolidColorBrush x:Key="HyperlinkOverForeground" Color="#ffd0d0d0"/>
    <SolidColorBrush x:Key="HyperlinkNormalForeground" Color="#FF267E26"/>
    <SolidColorBrush x:Key="HyperlinkClickForeground" Color="#FF2D972D"/>

    <Storyboard x:Key="hyperlinkstoryboard">
        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Foreground" Duration="0:0:0.1">
            <ObjectAnimationUsingKeyFrames.KeyFrames>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{StaticResource HyperlinkClickForeground}"/>
            </ObjectAnimationUsingKeyFrames.KeyFrames>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>

    <Style TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{StaticResource HyperlinkNormalForeground}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource HyperlinkOverForeground}" />
                <Trigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="beginStoryboard"/>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Foreground" Value="{StaticResource HyperlinkOverForeground}" />
                <Trigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="beginStoryboard"/>
                </Trigger.ExitActions>
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <BeginStoryboard Storyboard="{StaticResource hyperlinkstoryboard}" x:Name="beginStoryboard"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <RemoveStoryboard BeginStoryboardName="beginStoryboard"/>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!-- PageGroupBoxStyle -->
    <Style x:Key="PageGroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <!-- Header -->
                        <Border BorderBrush="{DynamicResource Shadow}" BorderThickness="0,0,1,1"  Grid.Row="0" />

                        <Border BorderBrush="{DynamicResource Highlight}" BorderThickness="1,1,0,0"  Grid.Row="0" >
                            <Border.Background>
                                <LinearGradientBrush  StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Color="#00202020" Offset="0"/>
                                    <GradientStop Color="#00202020" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>


                            <!-- Header -->

                            <ContentPresenter Margin="{DynamicResource StandardMargin}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" />
                        </Border>

                        <!-- Content -->
                        <ContentPresenter Grid.Row="1" Margin="{TemplateBinding Padding}"/>


                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- PageHeaderGroupBoxStyle -->
    <Style x:Key="PageHeaderGroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid  Margin="30,15,20,0">

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- Header -->
                        <ContentPresenter  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" />


                        <!-- Content -->
                        <ContentPresenter  Margin="0,3,0,0" Grid.Row="1"/>

                        <!-- Devider -->
                        <Border Margin="0,14,0,0" Grid.Row="2" Height="2" Background="#15ffffff" BorderBrush="#50000000" BorderThickness="1,1,0,0" />

                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- PageHeaderTitleStyle -->
    <Style x:Key="PageHeaderTitleStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextElement.Foreground" Value="#ffffffff"/>
        <Setter Property="TextElement.FontSize" Value="20"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!-- PageHeaderDescriptionStyle -->
    <Style x:Key="PageHeaderDescriptionStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextElement.FontSize" Value="12"/>
        <Setter Property="TextElement.Foreground" Value="#ffa0a0a0"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!-- PageWelcomeHeaderStyle -->
    <Style x:Key="PageWelcomeHeaderStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextElement.FontSize" Value="12"/>
        <Setter Property="TextElement.Foreground" Value="#ffffffff"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!-- PageButtonBar -->
    <Style x:Key="PageButtonBar" TargetType="{x:Type GroupBox}">
        <Setter Property="Padding" Value="15,10,15,10"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Background" Value="#00ffffff" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid >
                        <!--
                        <Grid.Effect>
                            <DropShadowEffect Direction="90"  Opacity="0.2" Color="#FF000000" BlurRadius="5" ShadowDepth="2" />
                        </Grid.Effect>
-->
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <!-- Header -->
                        <Border BorderBrush="{DynamicResource Shadow}" BorderThickness="0,0,0,0"  Grid.Row="0" CornerRadius="0,0,0,0" Background="{TemplateBinding Background}" >
                            <Border BorderBrush="#00454545" BorderThickness="0,1,0,0"  Grid.Row="0" CornerRadius="0,0,0,0">
                                <Grid>
                                    <!-- Header -->
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" />
                                    <!-- Content -->
                                    <ContentPresenter Grid.Row="1" Margin="{TemplateBinding Padding}"/>
                                </Grid>
                            </Border>
                        </Border>

                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- STYLE: CheckBoxStyleFocusVisual -->
    <Style x:Key="CheckBoxStyleFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="TestFocusStoryBoard">
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="0:0:0.8" AutoReverse="True" RepeatBehavior="Forever" />
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Border Margin="0" Opacity="1" BorderBrush="#ffffffff" BorderThickness="0,0,0,1" CornerRadius="0">
                        <Border.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <EventTrigger.Actions>
                                    <BeginStoryboard Storyboard="{DynamicResource TestFocusStoryBoard}" />
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Border.Triggers>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- BigRadioBoxStyle -->
    <Style x:Key="BigRadioButtonStyle" TargetType="{x:Type RadioButton}" >
        <Setter Property="FocusVisualStyle" Value="{DynamicResource BigRadioButtonStyleFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ThemeColor}"/>
        <Setter Property="BorderBrush" Value="#40000000"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0,1,0,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">

                    <Grid  Background="Transparent" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Box" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Content"/>
                        </Grid.ColumnDefinitions>

                        <Border Margin="0,0,10,0"  Padding="0" VerticalAlignment="Center" >

                            <Grid>

                                <Border x:Name="main" Background="#20ffffff" Opacity="1" BorderBrush="#00000000" BorderThickness="1"  CornerRadius="15"/>

                                <Border x:Name="downOverlay" Background="Transparent" Opacity="1" BorderThickness="1" CornerRadius="15"/>
                                <Border x:Name="disabledOverlay" Background="#40000000" Opacity="1" BorderThickness="0" CornerRadius="15" Visibility="Collapsed"/>

                                <Grid x:Name="cp" Margin="{TemplateBinding Padding}" Width="20" Height="20">
                                    <Rectangle Margin="0,0,0,0" x:Name="CheckMark" Width="10" Height="10" Stroke="#00000000" StrokeThickness="1" Fill="#FF319031" RadiusX="5" RadiusY="5" />
                                </Grid>

                            </Grid>

                        </Border>

                        <!-- Content -->
                        <Border Grid.Column="1" Margin="0,0,0,0" VerticalAlignment="Center">
                            <ContentPresenter Margin="0" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                    </Grid>


                    <ControlTemplate.Triggers>

                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter Property="Background" Value="#40000000" TargetName="downOverlay"   />
                        </Trigger>


                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="main"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="downOverlay"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="disabledOverlay"/>
                            <Setter Property="Opacity" Value="0.6" TargetName="cp"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>

                        </Trigger>

                    </ControlTemplate.Triggers>



                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- STYLE: BigRadioBoxStyleFocusVisual -->
    <Style x:Key="BigRadioButtonStyleFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="TestFocusStoryBoard">
                            <DoubleAnimation  Storyboard.TargetProperty="Opacity" From="1.0" To="0.6" Duration="0:0:0.8" AutoReverse="True" RepeatBehavior="Forever" />
                        </Storyboard>

                    </ControlTemplate.Resources>

                    <Border  Margin="0" Opacity="1" BorderBrush="#ffffffff" BorderThickness="0,0,0,1" CornerRadius="0,0,0,0">
                        <Border.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <EventTrigger.Actions>
                                    <BeginStoryboard Storyboard="{DynamicResource TestFocusStoryBoard}" />
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Border.Triggers>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ShadowLabelStyle -->
    <Style x:Key="ShadowLabelStyle" TargetType="{x:Type Label}" >
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Background" Value="{DynamicResource Selector_Background}"/>
        <Setter Property="TextElement.FontWeight" Value="Bold"/>
        <Setter Property="TextElement.FontSize" Value="14.5"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource Selector_Foreground}"/>
        <Setter Property="Margin" Value="0,2.5,0,2.5"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid SnapsToDevicePixels="True">
                        <ContentPresenter  Margin="1,1,0,0" TextElement.Foreground="{TemplateBinding Background}" />
                        <ContentPresenter    Margin="-1,1,0,0" TextElement.Foreground="{TemplateBinding Background}" />
                        <ContentPresenter x:Name="myContent" SnapsToDevicePixels="True" ContentSource="Content" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>


    <Style x:Key="ComponentDescription" TargetType="{x:Type TextBlock}">
        <Setter Property="TextElement.Foreground" Value="#ffa0a0a0"/>
        <Setter Property="Margin" Value="0,0,0,2.5"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
        <Setter Property="TextElement.Foreground" Value="White"/>
        <Setter Property="HorizontalContentAlignment"  Value="Left" />
        <Setter Property="VerticalContentAlignment"  Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <Border>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"  Value="false">
                            <Setter Property="Foreground" Value="#FFFFFFFF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Page -->

    <Style x:Key="PagePanel_Style" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="{DynamicResource Page_Background}"/>
    </Style>

    <Style x:Key="Page_Content_Panel_Style" TargetType="{x:Type Grid}">
        <Setter Property="Margin" Value="30,7.5,20,7.5"/>
    </Style>


    <Style TargetType="{x:Type ScrollViewer}">
        <Style.Triggers>
            <!-- Animates the rectangle's opacity. -->
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                                    Storyboard.TargetProperty="Opacity"
                                    From="0.0" To="1.0" Duration="0:0:0.5" 
                                    AutoReverse="False" RepeatBehavior="1x" />

                        <!--<DoubleAnimation Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)" From="800" To="0"  />-->

                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>

            <!--<EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                                    Storyboard.TargetProperty="Top"
                                    From="0" To="100.0" Duration="0:0:0.5" 
                                    AutoReverse="False" RepeatBehavior="1x" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>-->

        </Style.Triggers>
    </Style>


</ResourceDictionary>