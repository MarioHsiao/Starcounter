// Generated code. This code matches, parses and invokes Http handlers. The code was generated by the Starcounter http/spdy handler engine.

using Starcounter;
using Starcounter.Internal;
using Starcounter.Internal.Uri;
using System.Text;
using System.Collections.Generic;
using System;
using HttpStructs;

namespace __urimatcher__ {

   public class GeneratedRequestProcessor : TopLevelRequestProcessor {
      #if DEBUG
      internal static string UriOutput;
      internal static string TemplateOutput;
      #endif

      public static int Sub0VerificationOffset = 0;
      public static int Sub1VerificationOffset = 6;
      public static int Sub2VerificationOffset = 24;
      public static int Sub3VerificationOffset = 45;
      public static int Sub4VerificationOffset = 66;
      public static int Sub5VerificationOffset = 88;
      public static int Sub6VerificationOffset = 88;
      public static int Sub7VerificationOffset = 102;
      public static int Sub8VerificationOffset = 119;
      public static int Sub9VerificationOffset = 138;
      public static int Sub10VerificationOffset = 151;
      public static int Sub11VerificationOffset = 167;
      public static int Sub12VerificationOffset = 183;
      public static int Sub13VerificationOffset = 201;
      public static int Sub14VerificationOffset = 201;
      public static int Sub15VerificationOffset = 201;
      public static int Sub16VerificationOffset = 229;
      public static int Sub17VerificationOffset = 254;
      public static int Sub18VerificationOffset = 279;
      public static int Sub19VerificationOffset = 279;
      public static int Sub20VerificationOffset = 304;
      public static int Sub21VerificationOffset = 318;
      public static int Sub22VerificationOffset = 332;
      public static int Sub23VerificationOffset = 353;
      public static int Sub24VerificationOffset = 373;
      public static int Sub25VerificationOffset = 395;
      public static int Sub26VerificationOffset = 413;
      public static int Sub27VerificationOffset = 429;
      public static int Sub28VerificationOffset = 447;
      public static int Sub29VerificationOffset = 464;
      public static int Sub30VerificationOffset = 464;
      public static int Sub31VerificationOffset = 464;
      public static int Sub32VerificationOffset = 514;
      public static byte[] VerificationBytes = new byte[] {(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'u',(byte)'r',(byte)'i',(byte)'-',(byte)'w',(byte)'i',(byte)'t',(byte)'h',(byte)'-',(byte)'r',(byte)'e',(byte)'q',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'u',(byte)'r',(byte)'i',(byte)'-',(byte)'w',(byte)'i',(byte)'t',(byte)'h',(byte)'-',(byte)'r',(byte)'e',(byte)'q',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'u',(byte)'r',(byte)'i',(byte)'-',(byte)'w',(byte)'i',(byte)'t',(byte)'h',(byte)'-',(byte)'r',(byte)'e',(byte)'q',(byte)'/',(byte)'@',(byte)'s',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'a',(byte)'d',(byte)'m',(byte)'i',(byte)'n',(byte)'/',(byte)'a',(byte)'p',(byte)'a',(byte)'p',(byte)'a',(byte)'p',(byte)'a',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'a',(byte)'d',(byte)'m',(byte)'i',(byte)'n',(byte)'/',(byte)'@',(byte)'s',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'a',(byte)'d',(byte)'m',(byte)'i',(byte)'n',(byte)'/',(byte)'@',(byte)'s',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'a',(byte)'a',(byte)'a',(byte)'a',(byte)'a',(byte)'/',(byte)'@',(byte)'i',(byte)'/',(byte)'b',(byte)'b',(byte)'b',(byte)'b',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'p',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'s',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'p',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'s',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'p',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'s',(byte)'?',(byte)'@',(byte)'s',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'d',(byte)'a',(byte)'s',(byte)'h',(byte)'b',(byte)'o',(byte)'a',(byte)'r',(byte)'d',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'w',(byte)'h',(byte)'a',(byte)'t',(byte)'e',(byte)'v',(byte)'e',(byte)'r',(byte)'/',(byte)'@',(byte)'s',(byte)'/',(byte)'m',(byte)'o',(byte)'r',(byte)'e',(byte)'/',(byte)'@',(byte)'i',(byte)'/',(byte)'@',(byte)'s',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'w',(byte)'h',(byte)'a',(byte)'t',(byte)'e',(byte)'v',(byte)'e',(byte)'r',(byte)'/',(byte)'@',(byte)'s',(byte)'/',(byte)'x',(byte)'x',(byte)'Y',(byte)'x',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'w',(byte)'h',(byte)'a',(byte)'t',(byte)'e',(byte)'v',(byte)'e',(byte)'r',(byte)'/',(byte)'@',(byte)'s',(byte)'/',(byte)'x',(byte)'x',(byte)'Z',(byte)'x',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'w',(byte)'h',(byte)'a',(byte)'t',(byte)'m',(byte)'o',(byte)'r',(byte)'e',(byte)'/',(byte)'@',(byte)'s',(byte)'/',(byte)'x',(byte)'x',(byte)'Z',(byte)'x',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'o',(byte)'r',(byte)'d',(byte)'i',(byte)'n',(byte)'a',(byte)'r',(byte)'y',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'o',(byte)'r',(byte)'d',(byte)'A',(byte)'n',(byte)'a',(byte)'r',(byte)'y',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'t',(byte)'e',(byte)'s',(byte)'t',(byte)'-',(byte)'d',(byte)'e',(byte)'c',(byte)'i',(byte)'m',(byte)'a',(byte)'l',(byte)'/',(byte)'@',(byte)'m',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'t',(byte)'e',(byte)'s',(byte)'t',(byte)'-',(byte)'d',(byte)'o',(byte)'u',(byte)'b',(byte)'l',(byte)'e',(byte)'/',(byte)'@',(byte)'d',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'t',(byte)'e',(byte)'s',(byte)'t',(byte)'-',(byte)'d',(byte)'a',(byte)'t',(byte)'e',(byte)'t',(byte)'i',(byte)'m',(byte)'e',(byte)'/',(byte)'@',(byte)'t',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'t',(byte)'e',(byte)'s',(byte)'t',(byte)'-',(byte)'b',(byte)'o',(byte)'o',(byte)'l',(byte)'/',(byte)'@',(byte)'b',(byte)' ',(byte)'P',(byte)'U',(byte)'T',(byte)' ',(byte)'/',(byte)'p',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'s',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'P',(byte)'O',(byte)'S',(byte)'T',(byte)' ',(byte)'/',(byte)'t',(byte)'r',(byte)'a',(byte)'n',(byte)'s',(byte)'f',(byte)'e',(byte)'r',(byte)'?',(byte)'@',(byte)'i',(byte)' ',(byte)'P',(byte)'O',(byte)'S',(byte)'T',(byte)' ',(byte)'/',(byte)'d',(byte)'e',(byte)'p',(byte)'o',(byte)'s',(byte)'i',(byte)'t',(byte)'?',(byte)'@',(byte)'i',(byte)' ',(byte)'P',(byte)'O',(byte)'S',(byte)'T',(byte)' ',(byte)'/',(byte)'f',(byte)'i',(byte)'n',(byte)'d',(byte)'-',(byte)'p',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'?',(byte)'f',(byte)'i',(byte)'r',(byte)'s',(byte)'t',(byte)'n',(byte)'a',(byte)'m',(byte)'e',(byte)'=',(byte)'@',(byte)'s',(byte)'&',(byte)'l',(byte)'a',(byte)'s',(byte)'t',(byte)'n',(byte)'a',(byte)'m',(byte)'e',(byte)'=',(byte)'@',(byte)'s',(byte)'&',(byte)'a',(byte)'g',(byte)'e',(byte)'=',(byte)'@',(byte)'i',(byte)' ',(byte)'D',(byte)'E',(byte)'L',(byte)'E',(byte)'T',(byte)'E',(byte)' ',(byte)'/',(byte)'a',(byte)'l',(byte)'l',(byte)' '};
      public static IntPtr PointerVerificationBytes;

      public static Sub0Processor Sub0 = new Sub0Processor();
      public static Sub1Processor Sub1 = new Sub1Processor();
      public static Sub2Processor Sub2 = new Sub2Processor();
      public static Sub3Processor Sub3 = new Sub3Processor();
      public static Sub4Processor Sub4 = new Sub4Processor();
      public static Sub5Processor Sub5 = new Sub5Processor();
      public static Sub6Processor Sub6 = new Sub6Processor();
      public static Sub7Processor Sub7 = new Sub7Processor();
      public static Sub8Processor Sub8 = new Sub8Processor();
      public static Sub9Processor Sub9 = new Sub9Processor();
      public static Sub10Processor Sub10 = new Sub10Processor();
      public static Sub11Processor Sub11 = new Sub11Processor();
      public static Sub12Processor Sub12 = new Sub12Processor();
      public static Sub13Processor Sub13 = new Sub13Processor();
      public static Sub14Processor Sub14 = new Sub14Processor();
      public static Sub15Processor Sub15 = new Sub15Processor();
      public static Sub16Processor Sub16 = new Sub16Processor();
      public static Sub17Processor Sub17 = new Sub17Processor();
      public static Sub18Processor Sub18 = new Sub18Processor();
      public static Sub19Processor Sub19 = new Sub19Processor();
      public static Sub20Processor Sub20 = new Sub20Processor();
      public static Sub21Processor Sub21 = new Sub21Processor();
      public static Sub22Processor Sub22 = new Sub22Processor();
      public static Sub23Processor Sub23 = new Sub23Processor();
      public static Sub24Processor Sub24 = new Sub24Processor();
      public static Sub25Processor Sub25 = new Sub25Processor();
      public static Sub26Processor Sub26 = new Sub26Processor();
      public static Sub27Processor Sub27 = new Sub27Processor();
      public static Sub28Processor Sub28 = new Sub28Processor();
      public static Sub29Processor Sub29 = new Sub29Processor();
      public static Sub30Processor Sub30 = new Sub30Processor();
      public static Sub31Processor Sub31 = new Sub31Processor();
      public static Sub32Processor Sub32 = new Sub32Processor();

      public GeneratedRequestProcessor() {
          Registrations["GET / "] = Sub0;
          Registrations["GET /uri-with-req "] = Sub1;
          Registrations["GET /uri-with-req/@i "] = Sub2;
          Registrations["GET /uri-with-req/@s "] = Sub3;
          Registrations["GET /admin/apapapa/@i "] = Sub4;
          Registrations["GET /admin/@s "] = Sub6;
          Registrations["GET /admin/@s/@i "] = Sub7;
          Registrations["GET /players "] = Sub9;
          Registrations["GET /players/@i "] = Sub10;
          Registrations["GET /dashboard/@i "] = Sub12;
          Registrations["GET /players?@s "] = Sub11;
          Registrations["GET /whatever/@s/more/@i/@s "] = Sub15;
          Registrations["GET /ordinary "] = Sub20;
          Registrations["GET /ordAnary "] = Sub21;
          Registrations["GET /aaaaa/@i/bbbb "] = Sub8;
          Registrations["GET /whatever/@s/xxYx/@i "] = Sub16;
          Registrations["GET /whatever/@s/xxZx/@i "] = Sub17;
          Registrations["GET /whatmore/@s/xxZx/@i "] = Sub19;
          Registrations["GET /test-decimal/@m "] = Sub22;
          Registrations["GET /test-double/@d "] = Sub23;
          Registrations["GET /test-bool/@b "] = Sub25;
          Registrations["GET /test-datetime/@t "] = Sub24;
          Registrations["PUT /players/@i "] = Sub26;
          Registrations["POST /transfer?@i "] = Sub27;
          Registrations["POST /deposit?@i "] = Sub28;
          Registrations["POST /find-player?firstname=@s&lastname=@s&age=@i "] = Sub31;
          Registrations["DELETE /all "] = Sub32;
          PointerVerificationBytes = BitsAndBytes.Alloc(VerificationBytes.Length); // TODO. Free when program exists
          BitsAndBytes.SlowMemCopy( PointerVerificationBytes, VerificationBytes, (uint)VerificationBytes.Length);
      }

      public override bool Process(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
      #if DEBUG
      UriOutput = "";
      TemplateOutput = "";
      try {
      #endif
         unsafe {
            byte* pfrag = (byte*)fragment;
            byte* ptempl = (byte*)PointerVerificationBytes;
            int nextSize = size;
            switch (*pfrag) {
               case (byte)'G':
                  #if DEBUG
                  UriOutput += "'";
                  TemplateOutput += "'";
                  #endif
                  #if DEBUG
                  for(int i = 0; i < 4; i++) {
                      UriOutput += (char)pfrag[i];
                      TemplateOutput += (char)ptempl[i];
                  }
                  #endif
                  nextSize -= 4;
                  if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += 4;
                  ptempl += 4;
                  #if DEBUG
                  for(int i = 0; i < 1; i++) {
                      UriOutput += (char)pfrag[i];
                      TemplateOutput += (char)ptempl[i];
                  }
                  #endif
                  nextSize --;
                  if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag ++;
                  ptempl ++;
                  #if DEBUG
                  UriOutput += "' ";
                  TemplateOutput += "' ";
                  #endif
                  switch (*pfrag) {
                     case (byte)' ':
                     case (byte)'\r':
                        if (Sub0.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                     case (byte)'u':
                        ptempl = ((byte*)PointerVerificationBytes + Sub1VerificationOffset + 5);
                        #if DEBUG
                        UriOutput += "'";
                        TemplateOutput += "'";
                        #endif
                        #if DEBUG
                        for(int i = 0; i < 8; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 8;
                        if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag += 8;
                        ptempl += 8;
                        #if DEBUG
                        for(int i = 0; i < 4; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 4;
                        if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag += 4;
                        ptempl += 4;
                        #if DEBUG
                        UriOutput += "' ";
                        TemplateOutput += "' ";
                        #endif
                        switch (*pfrag) {
                           case (byte)' ':
                           case (byte)'\r':
                              if (Sub1.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                           case (byte)'/':
                              ptempl = ((byte*)PointerVerificationBytes + Sub2VerificationOffset + 17);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  break;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub2.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              else if (Sub3.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                        }
                        break;
                     case (byte)'a':
                        ptempl = ((byte*)PointerVerificationBytes + Sub4VerificationOffset + 5);
                        #if DEBUG
                        UriOutput += "'";
                        TemplateOutput += "'";
                        #endif
                        #if DEBUG
                        for(int i = 0; i < 1; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize --;
                        if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag ++;
                        ptempl ++;
                        #if DEBUG
                        UriOutput += "' ";
                        TemplateOutput += "' ";
                        #endif
                        switch (*pfrag) {
                           case (byte)'d':
                              ptempl = ((byte*)PointerVerificationBytes + Sub4VerificationOffset + 6);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 4; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 4;
                              if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                                  handler = null;
                                  resource = null;
                                  return false;
                              }
                              pfrag += 4;
                              ptempl += 4;
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  handler = null;
                                  resource = null;
                                  return false;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              switch (*pfrag) {
                                 case (byte)'a':
                                    ptempl = ((byte*)PointerVerificationBytes + Sub4VerificationOffset + 11);
                                    #if DEBUG
                                    UriOutput += "'";
                                    TemplateOutput += "'";
                                    #endif
                                    #if DEBUG
                                    for(int i = 0; i < 8; i++) {
                                        UriOutput += (char)pfrag[i];
                                        TemplateOutput += (char)ptempl[i];
                                    }
                                    #endif
                                    nextSize -= 8;
                                    if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                                        break;
                                    }
                                    pfrag += 8;
                                    ptempl += 8;
                                    #if DEBUG
                                    UriOutput += "' ";
                                    TemplateOutput += "' ";
                                    #endif
                                    if (Sub4.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                       return true;
                                    break;
                                 default:
                                    if (Sub5.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                       return true;
                                    break;
                              }
                              break;
                           case (byte)'a':
                              ptempl = ((byte*)PointerVerificationBytes + Sub8VerificationOffset + 6);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 4; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 4;
                              if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                                  break;
                              }
                              pfrag += 4;
                              ptempl += 4;
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  break;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub8.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                        }
                        break;
                     case (byte)'p':
                        ptempl = ((byte*)PointerVerificationBytes + Sub9VerificationOffset + 5);
                        #if DEBUG
                        UriOutput += "'";
                        TemplateOutput += "'";
                        #endif
                        #if DEBUG
                        for(int i = 0; i < 4; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 4;
                        if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag += 4;
                        ptempl += 4;
                        #if DEBUG
                        for(int i = 0; i < 2; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 2;
                        if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag += 2;
                        ptempl += 2;
                        #if DEBUG
                        for(int i = 0; i < 1; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize --;
                        if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag ++;
                        ptempl ++;
                        #if DEBUG
                        UriOutput += "' ";
                        TemplateOutput += "' ";
                        #endif
                        switch (*pfrag) {
                           case (byte)' ':
                           case (byte)'\r':
                              if (Sub9.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                           case (byte)'/':
                              ptempl = ((byte*)PointerVerificationBytes + Sub10VerificationOffset + 12);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  break;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub10.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                           case (byte)'?':
                              ptempl = ((byte*)PointerVerificationBytes + Sub11VerificationOffset + 12);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  break;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub11.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                        }
                        break;
                     case (byte)'d':
                        ptempl = ((byte*)PointerVerificationBytes + Sub12VerificationOffset + 5);
                        #if DEBUG
                        UriOutput += "'";
                        TemplateOutput += "'";
                        #endif
                        #if DEBUG
                        for(int i = 0; i < 8; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 8;
                        if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                            break;
                        }
                        pfrag += 8;
                        ptempl += 8;
                        #if DEBUG
                        for(int i = 0; i < 2; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 2;
                        if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                            break;
                        }
                        pfrag += 2;
                        ptempl += 2;
                        #if DEBUG
                        UriOutput += "' ";
                        TemplateOutput += "' ";
                        #endif
                        if (Sub12.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                     case (byte)'w':
                        ptempl = ((byte*)PointerVerificationBytes + Sub13VerificationOffset + 5);
                        #if DEBUG
                        UriOutput += "'";
                        TemplateOutput += "'";
                        #endif
                        #if DEBUG
                        for(int i = 0; i < 4; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 4;
                        if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag += 4;
                        ptempl += 4;
                        #if DEBUG
                        UriOutput += "' ";
                        TemplateOutput += "' ";
                        #endif
                        switch (*pfrag) {
                           case (byte)'e':
                              ptempl = ((byte*)PointerVerificationBytes + Sub13VerificationOffset + 9);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 4; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 4;
                              if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                                  break;
                              }
                              pfrag += 4;
                              ptempl += 4;
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  break;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub13.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                           case (byte)'m':
                              ptempl = ((byte*)PointerVerificationBytes + Sub18VerificationOffset + 9);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 4; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 4;
                              if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                                  break;
                              }
                              pfrag += 4;
                              ptempl += 4;
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  break;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub18.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                        }
                        break;
                     case (byte)'o':
                        ptempl = ((byte*)PointerVerificationBytes + Sub20VerificationOffset + 5);
                        #if DEBUG
                        UriOutput += "'";
                        TemplateOutput += "'";
                        #endif
                        #if DEBUG
                        for(int i = 0; i < 2; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 2;
                        if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag += 2;
                        ptempl += 2;
                        #if DEBUG
                        for(int i = 0; i < 1; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize --;
                        if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag ++;
                        ptempl ++;
                        #if DEBUG
                        UriOutput += "' ";
                        TemplateOutput += "' ";
                        #endif
                        switch (*pfrag) {
                           case (byte)'i':
                              ptempl = ((byte*)PointerVerificationBytes + Sub20VerificationOffset + 8);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 4; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 4;
                              if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                                  break;
                              }
                              pfrag += 4;
                              ptempl += 4;
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  break;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub20.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                           case (byte)'A':
                              ptempl = ((byte*)PointerVerificationBytes + Sub21VerificationOffset + 8);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 4; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 4;
                              if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                                  break;
                              }
                              pfrag += 4;
                              ptempl += 4;
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  break;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub21.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                        }
                        break;
                     case (byte)'t':
                        ptempl = ((byte*)PointerVerificationBytes + Sub22VerificationOffset + 5);
                        #if DEBUG
                        UriOutput += "'";
                        TemplateOutput += "'";
                        #endif
                        #if DEBUG
                        for(int i = 0; i < 4; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 4;
                        if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag += 4;
                        ptempl += 4;
                        #if DEBUG
                        for(int i = 0; i < 1; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize --;
                        if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag ++;
                        ptempl ++;
                        #if DEBUG
                        UriOutput += "' ";
                        TemplateOutput += "' ";
                        #endif
                        switch (*pfrag) {
                           case (byte)'d':
                              ptempl = ((byte*)PointerVerificationBytes + Sub22VerificationOffset + 10);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  handler = null;
                                  resource = null;
                                  return false;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              switch (*pfrag) {
                                 case (byte)'e':
                                    ptempl = ((byte*)PointerVerificationBytes + Sub22VerificationOffset + 11);
                                    #if DEBUG
                                    UriOutput += "'";
                                    TemplateOutput += "'";
                                    #endif
                                    #if DEBUG
                                    for(int i = 0; i < 4; i++) {
                                        UriOutput += (char)pfrag[i];
                                        TemplateOutput += (char)ptempl[i];
                                    }
                                    #endif
                                    nextSize -= 4;
                                    if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                                        break;
                                    }
                                    pfrag += 4;
                                    ptempl += 4;
                                    #if DEBUG
                                    for(int i = 0; i < 2; i++) {
                                        UriOutput += (char)pfrag[i];
                                        TemplateOutput += (char)ptempl[i];
                                    }
                                    #endif
                                    nextSize -= 2;
                                    if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                                        break;
                                    }
                                    pfrag += 2;
                                    ptempl += 2;
                                    #if DEBUG
                                    for(int i = 0; i < 1; i++) {
                                        UriOutput += (char)pfrag[i];
                                        TemplateOutput += (char)ptempl[i];
                                    }
                                    #endif
                                    nextSize --;
                                    if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                        break;
                                    }
                                    pfrag ++;
                                    ptempl ++;
                                    #if DEBUG
                                    UriOutput += "' ";
                                    TemplateOutput += "' ";
                                    #endif
                                    if (Sub22.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                       return true;
                                    break;
                                 case (byte)'o':
                                    ptempl = ((byte*)PointerVerificationBytes + Sub23VerificationOffset + 11);
                                    #if DEBUG
                                    UriOutput += "'";
                                    TemplateOutput += "'";
                                    #endif
                                    #if DEBUG
                                    for(int i = 0; i < 4; i++) {
                                        UriOutput += (char)pfrag[i];
                                        TemplateOutput += (char)ptempl[i];
                                    }
                                    #endif
                                    nextSize -= 4;
                                    if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                                        break;
                                    }
                                    pfrag += 4;
                                    ptempl += 4;
                                    #if DEBUG
                                    for(int i = 0; i < 2; i++) {
                                        UriOutput += (char)pfrag[i];
                                        TemplateOutput += (char)ptempl[i];
                                    }
                                    #endif
                                    nextSize -= 2;
                                    if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                                        break;
                                    }
                                    pfrag += 2;
                                    ptempl += 2;
                                    #if DEBUG
                                    UriOutput += "' ";
                                    TemplateOutput += "' ";
                                    #endif
                                    if (Sub23.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                       return true;
                                    break;
                                 case (byte)'a':
                                    ptempl = ((byte*)PointerVerificationBytes + Sub24VerificationOffset + 11);
                                    #if DEBUG
                                    UriOutput += "'";
                                    TemplateOutput += "'";
                                    #endif
                                    #if DEBUG
                                    for(int i = 0; i < 8; i++) {
                                        UriOutput += (char)pfrag[i];
                                        TemplateOutput += (char)ptempl[i];
                                    }
                                    #endif
                                    nextSize -= 8;
                                    if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                                        break;
                                    }
                                    pfrag += 8;
                                    ptempl += 8;
                                    #if DEBUG
                                    UriOutput += "' ";
                                    TemplateOutput += "' ";
                                    #endif
                                    if (Sub24.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                       return true;
                                    break;
                              }
                              break;
                           case (byte)'b':
                              ptempl = ((byte*)PointerVerificationBytes + Sub25VerificationOffset + 10);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 4; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 4;
                              if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                                  break;
                              }
                              pfrag += 4;
                              ptempl += 4;
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  break;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub25.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                        }
                        break;
                  }
                  break;
               case (byte)'P':
                  ptempl = ((byte*)PointerVerificationBytes + Sub26VerificationOffset + 0);
                  #if DEBUG
                  UriOutput += "'";
                  TemplateOutput += "'";
                  #endif
                  #if DEBUG
                  for(int i = 0; i < 1; i++) {
                      UriOutput += (char)pfrag[i];
                      TemplateOutput += (char)ptempl[i];
                  }
                  #endif
                  nextSize --;
                  if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag ++;
                  ptempl ++;
                  #if DEBUG
                  UriOutput += "' ";
                  TemplateOutput += "' ";
                  #endif
                  switch (*pfrag) {
                     case (byte)'U':
                        ptempl = ((byte*)PointerVerificationBytes + Sub26VerificationOffset + 1);
                        #if DEBUG
                        UriOutput += "'";
                        TemplateOutput += "'";
                        #endif
                        #if DEBUG
                        for(int i = 0; i < 8; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 8;
                        if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                            break;
                        }
                        pfrag += 8;
                        ptempl += 8;
                        #if DEBUG
                        for(int i = 0; i < 4; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 4;
                        if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                            break;
                        }
                        pfrag += 4;
                        ptempl += 4;
                        #if DEBUG
                        UriOutput += "' ";
                        TemplateOutput += "' ";
                        #endif
                        if (Sub26.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                     case (byte)'O':
                        ptempl = ((byte*)PointerVerificationBytes + Sub27VerificationOffset + 1);
                        #if DEBUG
                        UriOutput += "'";
                        TemplateOutput += "'";
                        #endif
                        #if DEBUG
                        for(int i = 0; i < 4; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize -= 4;
                        if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag += 4;
                        ptempl += 4;
                        #if DEBUG
                        for(int i = 0; i < 1; i++) {
                            UriOutput += (char)pfrag[i];
                            TemplateOutput += (char)ptempl[i];
                        }
                        #endif
                        nextSize --;
                        if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag ++;
                        ptempl ++;
                        #if DEBUG
                        UriOutput += "' ";
                        TemplateOutput += "' ";
                        #endif
                        switch (*pfrag) {
                           case (byte)'t':
                              ptempl = ((byte*)PointerVerificationBytes + Sub27VerificationOffset + 6);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 8; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 8;
                              if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                                  break;
                              }
                              pfrag += 8;
                              ptempl += 8;
                              #if DEBUG
                              for(int i = 0; i < 1; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize --;
                              if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                  break;
                              }
                              pfrag ++;
                              ptempl ++;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub27.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                           case (byte)'d':
                              ptempl = ((byte*)PointerVerificationBytes + Sub28VerificationOffset + 6);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 8; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 8;
                              if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                                  break;
                              }
                              pfrag += 8;
                              ptempl += 8;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub28.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                           case (byte)'f':
                              ptempl = ((byte*)PointerVerificationBytes + Sub29VerificationOffset + 6);
                              #if DEBUG
                              UriOutput += "'";
                              TemplateOutput += "'";
                              #endif
                              #if DEBUG
                              for(int i = 0; i < 8; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 8;
                              if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                                  break;
                              }
                              pfrag += 8;
                              ptempl += 8;
                              #if DEBUG
                              for(int i = 0; i < 8; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 8;
                              if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                                  break;
                              }
                              pfrag += 8;
                              ptempl += 8;
                              #if DEBUG
                              for(int i = 0; i < 4; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 4;
                              if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                                  break;
                              }
                              pfrag += 4;
                              ptempl += 4;
                              #if DEBUG
                              for(int i = 0; i < 2; i++) {
                                  UriOutput += (char)pfrag[i];
                                  TemplateOutput += (char)ptempl[i];
                              }
                              #endif
                              nextSize -= 2;
                              if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                                  break;
                              }
                              pfrag += 2;
                              ptempl += 2;
                              #if DEBUG
                              UriOutput += "' ";
                              TemplateOutput += "' ";
                              #endif
                              if (Sub29.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                        }
                        break;
                  }
                  break;
               case (byte)'D':
                  ptempl = ((byte*)PointerVerificationBytes + Sub32VerificationOffset + 0);
                  #if DEBUG
                  UriOutput += "'";
                  TemplateOutput += "'";
                  #endif
                  #if DEBUG
                  for(int i = 0; i < 8; i++) {
                      UriOutput += (char)pfrag[i];
                      TemplateOutput += (char)ptempl[i];
                  }
                  #endif
                  nextSize -= 8;
                  if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                      break;
                  }
                  pfrag += 8;
                  ptempl += 8;
                  #if DEBUG
                  for(int i = 0; i < 2; i++) {
                      UriOutput += (char)pfrag[i];
                      TemplateOutput += (char)ptempl[i];
                  }
                  #endif
                  nextSize -= 2;
                  if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                      break;
                  }
                  pfrag += 2;
                  ptempl += 2;
                  #if DEBUG
                  for(int i = 0; i < 1; i++) {
                      UriOutput += (char)pfrag[i];
                      TemplateOutput += (char)ptempl[i];
                  }
                  #endif
                  nextSize --;
                  if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                      break;
                  }
                  pfrag ++;
                  ptempl ++;
                  #if DEBUG
                  UriOutput += "' ";
                  TemplateOutput += "' ";
                  #endif
                  if (Sub32.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                     return true;
                  break;
            }
         }
         handler = null;
         resource = null;
         return false;
      #if DEBUG
      } finally {
          Console.WriteLine("URI:      " + UriOutput);
          Console.WriteLine("TEMPLATE: " + TemplateOutput);
          Console.WriteLine("-");
      }
      #endif
      }

      public class Sub0Processor : SingleRequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke();
            return true;
         }
      }

      public class Sub1Processor : SingleRequestProcessor<HttpRequest> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke(request);
            return true;
         }
      }

      public class Sub2Processor : SingleRequestProcessor<HttpRequest,Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(request, val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub3Processor : SingleRequestProcessor<String,HttpRequest> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            #if DEBUG
            UriOutput += "'parse:string' ";
            TemplateOutput += "'parse:string' ";
            #endif
            if (ParseUriString(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val, request);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub4Processor : SingleRequestProcessor<Int32,HttpRequest> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val, request);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub5Processor : RequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            #if DEBUG
            UriOutput += "'parse:string' ";
            TemplateOutput += "'parse:string' ";
            #endif
            int vsize = SizeToDelimiterOrEnd(fragment, size, '/');
            if (ParseUriString(fragment, vsize, out val)) {
               unsafe {
                  byte* pfrag = (byte*)fragment;
                  byte* ptempl = (byte*)PointerVerificationBytes;
                  int nextSize = size;
                  nextSize -= vsize;
                  if (nextSize < 0) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += vsize;
                     switch (*pfrag) {
                        case (byte)' ':
                        case (byte)'\r':
                           if (Sub6.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                              return true;
                           break;
                        case (byte)'/':
                           ptempl = ((byte*)PointerVerificationBytes + Sub7VerificationOffset + 13);
                           #if DEBUG
                           UriOutput += "'";
                           TemplateOutput += "'";
                           #endif
                           #if DEBUG
                           for(int i = 0; i < 1; i++) {
                               UriOutput += (char)pfrag[i];
                               TemplateOutput += (char)ptempl[i];
                           }
                           #endif
                           nextSize --;
                           if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                               break;
                           }
                           pfrag ++;
                           ptempl ++;
                           #if DEBUG
                           UriOutput += "' ";
                           TemplateOutput += "' ";
                           #endif
                           if (Sub7.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                              return true;
                           break;
                     }
               }
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub6Processor : SingleRequestProcessor<String,HttpRequest> {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke(val1, request);
            return true;
         }
      }

      public class Sub7Processor : SingleRequestProcessor<String,Int32,HttpRequest> {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val1, val, request);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub8Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub9Processor : SingleRequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke();
            return true;
         }
      }

      public class Sub10Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub11Processor : SingleRequestProcessor<String> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            #if DEBUG
            UriOutput += "'parse:string' ";
            TemplateOutput += "'parse:string' ";
            #endif
            if (ParseUriString(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub12Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub13Processor : RequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            #if DEBUG
            UriOutput += "'parse:string' ";
            TemplateOutput += "'parse:string' ";
            #endif
            int vsize = SizeToDelimiterOrEnd(fragment, size, '/');
            if (ParseUriString(fragment, vsize, out val)) {
               unsafe {
                  byte* pfrag = (byte*)fragment;
                  byte* ptempl = (byte*)PointerVerificationBytes;
                  int nextSize = size;
                  nextSize -= vsize;
                  if (nextSize < 0) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += vsize;
                     ptempl = ((byte*)PointerVerificationBytes + Sub14VerificationOffset + 16);
                     #if DEBUG
                     UriOutput += "'";
                     TemplateOutput += "'";
                     #endif
                     #if DEBUG
                     for(int i = 0; i < 1; i++) {
                         UriOutput += (char)pfrag[i];
                         TemplateOutput += (char)ptempl[i];
                     }
                     #endif
                     nextSize --;
                     if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                         handler = null;
                         resource = null;
                         return false;
                     }
                     pfrag ++;
                     ptempl ++;
                     #if DEBUG
                     UriOutput += "' ";
                     TemplateOutput += "' ";
                     #endif
                     switch (*pfrag) {
                        case (byte)'m':
                           ptempl = ((byte*)PointerVerificationBytes + Sub14VerificationOffset + 17);
                           #if DEBUG
                           UriOutput += "'";
                           TemplateOutput += "'";
                           #endif
                           #if DEBUG
                           for(int i = 0; i < 4; i++) {
                               UriOutput += (char)pfrag[i];
                               TemplateOutput += (char)ptempl[i];
                           }
                           #endif
                           nextSize -= 4;
                           if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                               break;
                           }
                           pfrag += 4;
                           ptempl += 4;
                           #if DEBUG
                           for(int i = 0; i < 1; i++) {
                               UriOutput += (char)pfrag[i];
                               TemplateOutput += (char)ptempl[i];
                           }
                           #endif
                           nextSize --;
                           if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                               break;
                           }
                           pfrag ++;
                           ptempl ++;
                           #if DEBUG
                           UriOutput += "' ";
                           TemplateOutput += "' ";
                           #endif
                           if (Sub14.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                              return true;
                           break;
                        case (byte)'x':
                           ptempl = ((byte*)PointerVerificationBytes + Sub16VerificationOffset + 17);
                           #if DEBUG
                           UriOutput += "'";
                           TemplateOutput += "'";
                           #endif
                           #if DEBUG
                           for(int i = 0; i < 2; i++) {
                               UriOutput += (char)pfrag[i];
                               TemplateOutput += (char)ptempl[i];
                           }
                           #endif
                           nextSize -= 2;
                           if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                               handler = null;
                               resource = null;
                               return false;
                           }
                           pfrag += 2;
                           ptempl += 2;
                           #if DEBUG
                           UriOutput += "' ";
                           TemplateOutput += "' ";
                           #endif
                           switch (*pfrag) {
                              case (byte)'Y':
                                 ptempl = ((byte*)PointerVerificationBytes + Sub16VerificationOffset + 19);
                                 #if DEBUG
                                 UriOutput += "'";
                                 TemplateOutput += "'";
                                 #endif
                                 #if DEBUG
                                 for(int i = 0; i < 2; i++) {
                                     UriOutput += (char)pfrag[i];
                                     TemplateOutput += (char)ptempl[i];
                                 }
                                 #endif
                                 nextSize -= 2;
                                 if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                                     break;
                                 }
                                 pfrag += 2;
                                 ptempl += 2;
                                 #if DEBUG
                                 for(int i = 0; i < 1; i++) {
                                     UriOutput += (char)pfrag[i];
                                     TemplateOutput += (char)ptempl[i];
                                 }
                                 #endif
                                 nextSize --;
                                 if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                     break;
                                 }
                                 pfrag ++;
                                 ptempl ++;
                                 #if DEBUG
                                 UriOutput += "' ";
                                 TemplateOutput += "' ";
                                 #endif
                                 if (Sub16.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                    return true;
                                 break;
                              case (byte)'Z':
                                 ptempl = ((byte*)PointerVerificationBytes + Sub17VerificationOffset + 19);
                                 #if DEBUG
                                 UriOutput += "'";
                                 TemplateOutput += "'";
                                 #endif
                                 #if DEBUG
                                 for(int i = 0; i < 2; i++) {
                                     UriOutput += (char)pfrag[i];
                                     TemplateOutput += (char)ptempl[i];
                                 }
                                 #endif
                                 nextSize -= 2;
                                 if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                                     break;
                                 }
                                 pfrag += 2;
                                 ptempl += 2;
                                 #if DEBUG
                                 for(int i = 0; i < 1; i++) {
                                     UriOutput += (char)pfrag[i];
                                     TemplateOutput += (char)ptempl[i];
                                 }
                                 #endif
                                 nextSize --;
                                 if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                                     break;
                                 }
                                 pfrag ++;
                                 ptempl ++;
                                 #if DEBUG
                                 UriOutput += "' ";
                                 TemplateOutput += "' ";
                                 #endif
                                 if (Sub17.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                    return true;
                                 break;
                           }
                           break;
                     }
               }
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub14Processor : RequestProcessor {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            int vsize = SizeToDelimiterOrEnd(fragment, size, '/');
            if (ParseUriInt(fragment, vsize, out val)) {
               unsafe {
                  byte* pfrag = (byte*)fragment;
                  byte* ptempl = (byte*)PointerVerificationBytes;
                  int nextSize = size;
                  nextSize -= vsize;
                  if (nextSize < 0) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += vsize;
                     ptempl = ((byte*)PointerVerificationBytes + Sub15VerificationOffset + 24);
                     #if DEBUG
                     UriOutput += "'";
                     TemplateOutput += "'";
                     #endif
                     #if DEBUG
                     for(int i = 0; i < 1; i++) {
                         UriOutput += (char)pfrag[i];
                         TemplateOutput += (char)ptempl[i];
                     }
                     #endif
                     nextSize --;
                     if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                         handler = null;
                         resource = null;
                         return false;
                     }
                     pfrag ++;
                     ptempl ++;
                     #if DEBUG
                     UriOutput += "' ";
                     TemplateOutput += "' ";
                     #endif
                     if (Sub15.SubProcess(val1, val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                        return true;
               }
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub15Processor : SingleRequestProcessor<String,Int32,String> {

         public bool SubProcess(string val1, int val2, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            #if DEBUG
            UriOutput += "'parse:string' ";
            TemplateOutput += "'parse:string' ";
            #endif
            if (ParseUriString(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val1, val2, val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub16Processor : SingleRequestProcessor<String,Int32> {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val1, val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub17Processor : SingleRequestProcessor<String,Int32> {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val1, val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub18Processor : RequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            #if DEBUG
            UriOutput += "'parse:string' ";
            TemplateOutput += "'parse:string' ";
            #endif
            int vsize = SizeToDelimiterOrEnd(fragment, size, '/');
            if (ParseUriString(fragment, vsize, out val)) {
               unsafe {
                  byte* pfrag = (byte*)fragment;
                  byte* ptempl = (byte*)PointerVerificationBytes;
                  int nextSize = size;
                  nextSize -= vsize;
                  if (nextSize < 0) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += vsize;
                     ptempl = ((byte*)PointerVerificationBytes + Sub19VerificationOffset + 16);
                     #if DEBUG
                     UriOutput += "'";
                     TemplateOutput += "'";
                     #endif
                     #if DEBUG
                     for(int i = 0; i < 4; i++) {
                         UriOutput += (char)pfrag[i];
                         TemplateOutput += (char)ptempl[i];
                     }
                     #endif
                     nextSize -= 4;
                     if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                         handler = null;
                         resource = null;
                         return false;
                     }
                     pfrag += 4;
                     ptempl += 4;
                     #if DEBUG
                     for(int i = 0; i < 2; i++) {
                         UriOutput += (char)pfrag[i];
                         TemplateOutput += (char)ptempl[i];
                     }
                     #endif
                     nextSize -= 2;
                     if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                         handler = null;
                         resource = null;
                         return false;
                     }
                     pfrag += 2;
                     ptempl += 2;
                     #if DEBUG
                     UriOutput += "' ";
                     TemplateOutput += "' ";
                     #endif
                     if (Sub19.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                        return true;
               }
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub19Processor : SingleRequestProcessor<String,Int32> {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val1, val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub20Processor : SingleRequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke();
            return true;
         }
      }

      public class Sub21Processor : SingleRequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke();
            return true;
         }
      }

      public class Sub22Processor : SingleRequestProcessor<Decimal> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            decimal val;
            #if DEBUG
            UriOutput += "'parse:decimal' ";
            TemplateOutput += "'parse:decimal' ";
            #endif
            if (ParseUriDecimal(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub23Processor : SingleRequestProcessor<Double> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            double val;
            #if DEBUG
            UriOutput += "'parse:double' ";
            TemplateOutput += "'parse:double' ";
            #endif
            if (ParseUriDouble(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub24Processor : SingleRequestProcessor<DateTime> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            DateTime val;
            #if DEBUG
            UriOutput += "'parse:DateTime' ";
            TemplateOutput += "'parse:DateTime' ";
            #endif
            if (ParseUriDateTime(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub25Processor : SingleRequestProcessor<Boolean> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            bool val;
            #if DEBUG
            UriOutput += "'parse:bool' ";
            TemplateOutput += "'parse:bool' ";
            #endif
            if (ParseUriBoolean(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub26Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub27Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub28Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub29Processor : RequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            #if DEBUG
            UriOutput += "'parse:string' ";
            TemplateOutput += "'parse:string' ";
            #endif
            int vsize = SizeToDelimiterOrEnd(fragment, size, '/');
            if (ParseUriString(fragment, vsize, out val)) {
               unsafe {
                  byte* pfrag = (byte*)fragment;
                  byte* ptempl = (byte*)PointerVerificationBytes;
                  int nextSize = size;
                  nextSize -= vsize;
                  if (nextSize < 0) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += vsize;
                     ptempl = ((byte*)PointerVerificationBytes + Sub30VerificationOffset + 30);
                     #if DEBUG
                     UriOutput += "'";
                     TemplateOutput += "'";
                     #endif
                     #if DEBUG
                     for(int i = 0; i < 8; i++) {
                         UriOutput += (char)pfrag[i];
                         TemplateOutput += (char)ptempl[i];
                     }
                     #endif
                     nextSize -= 8;
                     if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                         handler = null;
                         resource = null;
                         return false;
                     }
                     pfrag += 8;
                     ptempl += 8;
                     #if DEBUG
                     for(int i = 0; i < 2; i++) {
                         UriOutput += (char)pfrag[i];
                         TemplateOutput += (char)ptempl[i];
                     }
                     #endif
                     nextSize -= 2;
                     if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                         handler = null;
                         resource = null;
                         return false;
                     }
                     pfrag += 2;
                     ptempl += 2;
                     #if DEBUG
                     UriOutput += "' ";
                     TemplateOutput += "' ";
                     #endif
                     if (Sub30.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                        return true;
               }
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub30Processor : RequestProcessor {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            #if DEBUG
            UriOutput += "'parse:string' ";
            TemplateOutput += "'parse:string' ";
            #endif
            int vsize = SizeToDelimiterOrEnd(fragment, size, '/');
            if (ParseUriString(fragment, vsize, out val)) {
               unsafe {
                  byte* pfrag = (byte*)fragment;
                  byte* ptempl = (byte*)PointerVerificationBytes;
                  int nextSize = size;
                  nextSize -= vsize;
                  if (nextSize < 0) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += vsize;
                     ptempl = ((byte*)PointerVerificationBytes + Sub31VerificationOffset + 42);
                     #if DEBUG
                     UriOutput += "'";
                     TemplateOutput += "'";
                     #endif
                     #if DEBUG
                     for(int i = 0; i < 4; i++) {
                         UriOutput += (char)pfrag[i];
                         TemplateOutput += (char)ptempl[i];
                     }
                     #endif
                     nextSize -= 4;
                     if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                         handler = null;
                         resource = null;
                         return false;
                     }
                     pfrag += 4;
                     ptempl += 4;
                     #if DEBUG
                     for(int i = 0; i < 1; i++) {
                         UriOutput += (char)pfrag[i];
                         TemplateOutput += (char)ptempl[i];
                     }
                     #endif
                     nextSize --;
                     if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                         handler = null;
                         resource = null;
                         return false;
                     }
                     pfrag ++;
                     ptempl ++;
                     #if DEBUG
                     UriOutput += "' ";
                     TemplateOutput += "' ";
                     #endif
                     if (Sub31.SubProcess(val1, val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                        return true;
               }
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub31Processor : SingleRequestProcessor<String,String,Int32> {

         public bool SubProcess(string val1, string val2, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            #if DEBUG
            UriOutput += "'parse:int' ";
            TemplateOutput += "'parse:int' ";
            #endif
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val1, val2, val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub32Processor : SingleRequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke();
            return true;
         }
      }
   }
}
