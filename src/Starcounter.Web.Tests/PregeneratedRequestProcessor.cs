// Generated code. This code matches, parses and invokes Http handlers. The code was generated by the Starcounter http/spdy handler engine.

using Starcounter;
using Starcounter.Internal;
using Starcounter.Internal.Uri;
using System.Text;
using System.Collections.Generic;
using System;
using HttpStructs;

namespace __urimatcher__ {

   public class GeneratedRequestProcessor : TopLevelRequestProcessor {

      public static int Sub0VerificationOffset = 0;
      public static int Sub1VerificationOffset = 6;
      public static int Sub2VerificationOffset = 24;
      public static int Sub3VerificationOffset = 42;
      public static int Sub5VerificationOffset = 60;
      public static int Sub6VerificationOffset = 71;
      public static int Sub7VerificationOffset = 82;
      public static int Sub8VerificationOffset = 95;
      public static int Sub10VerificationOffset = 108;
      public static int Sub9VerificationOffset = 123;
      public static int Sub11VerificationOffset = 136;
      public static int Sub12VerificationOffset = 149;
      public static int Sub13VerificationOffset = 164;
      public static int Sub14VerificationOffset = 178;
      public static byte[] VerificationBytes = new byte[] {(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'u',(byte)'r',(byte)'i',(byte)'-',(byte)'w',(byte)'i',(byte)'t',(byte)'h',(byte)'-',(byte)'r',(byte)'e',(byte)'q',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'u',(byte)'r',(byte)'i',(byte)'-',(byte)'w',(byte)'i',(byte)'t',(byte)'h',(byte)'-',(byte)'r',(byte)'e',(byte)'q',(byte)'/',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'u',(byte)'r',(byte)'i',(byte)'-',(byte)'w',(byte)'i',(byte)'t',(byte)'h',(byte)'-',(byte)'r',(byte)'e',(byte)'q',(byte)'/',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'a',(byte)'d',(byte)'m',(byte)'i',(byte)'n',(byte)'/',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'a',(byte)'d',(byte)'m',(byte)'i',(byte)'n',(byte)'/',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'p',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'s',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'p',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'s',(byte)'/',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'d',(byte)'a',(byte)'s',(byte)'h',(byte)'b',(byte)'o',(byte)'a',(byte)'r',(byte)'d',(byte)'/',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'p',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'s',(byte)'?',(byte)'P',(byte)'U',(byte)'T',(byte)' ',(byte)'/',(byte)'p',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'s',(byte)'/',(byte)'P',(byte)'O',(byte)'S',(byte)'T',(byte)' ',(byte)'/',(byte)'t',(byte)'r',(byte)'a',(byte)'n',(byte)'s',(byte)'f',(byte)'e',(byte)'r',(byte)'?',(byte)'P',(byte)'O',(byte)'S',(byte)'T',(byte)' ',(byte)'/',(byte)'d',(byte)'e',(byte)'p',(byte)'o',(byte)'s',(byte)'i',(byte)'t',(byte)'?',(byte)'D',(byte)'E',(byte)'L',(byte)'E',(byte)'T',(byte)'E',(byte)' ',(byte)'/',(byte)'a',(byte)'l',(byte)'l',(byte)' '};
      public static IntPtr PointerVerificationBytes;

      public static Sub0Processor Sub0 = new Sub0Processor();
      public static Sub1Processor Sub1 = new Sub1Processor();
      public static Sub2Processor Sub2 = new Sub2Processor();
      public static Sub3Processor Sub3 = new Sub3Processor();
      public static Sub4Processor Sub4 = new Sub4Processor();
      public static Sub5Processor Sub5 = new Sub5Processor();
      public static Sub6Processor Sub6 = new Sub6Processor();
      public static Sub7Processor Sub7 = new Sub7Processor();
      public static Sub8Processor Sub8 = new Sub8Processor();
      public static Sub9Processor Sub9 = new Sub9Processor();
      public static Sub10Processor Sub10 = new Sub10Processor();
      public static Sub11Processor Sub11 = new Sub11Processor();
      public static Sub12Processor Sub12 = new Sub12Processor();
      public static Sub13Processor Sub13 = new Sub13Processor();
      public static Sub14Processor Sub14 = new Sub14Processor();

      public GeneratedRequestProcessor() {
          Registrations["GET / "] = Sub0;
          Registrations["GET /uri-with-req "] = Sub1;
          Registrations["GET /uri-with-req/@i "] = Sub2;
          Registrations["GET /uri-with-req/@s "] = Sub3;
          Registrations["GET /admin/@s "] = Sub5;
          Registrations["GET /admin/@s/@i "] = Sub6;
          Registrations["GET /players "] = Sub7;
          Registrations["GET /players/@i "] = Sub8;
          Registrations["GET /dashboard/@i "] = Sub10;
          Registrations["GET /players?@s "] = Sub9;
          Registrations["PUT /players/@i "] = Sub11;
          Registrations["POST /transfer?@i "] = Sub12;
          Registrations["POST /deposit?@i "] = Sub13;
          Registrations["DELETE /all "] = Sub14;
          PointerVerificationBytes = BitsAndBytes.Alloc(VerificationBytes.Length); // TODO. Free when program exists
          BitsAndBytes.SlowMemCopy( PointerVerificationBytes, VerificationBytes, (uint)VerificationBytes.Length);
      }

      public override bool Process(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
         unsafe {
            byte* pfrag = (byte*)fragment;
            int nextSize = size;
            nextSize -= 0;
            if (nextSize < 0) {
                handler = null;
                resource = null;
                return false;
            }
            pfrag += 0;
            switch (*pfrag) {
               case (byte)'G':
                  nextSize -= 5;
                  if (nextSize < 0) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += 5;
                  switch (*pfrag) {
                     case (byte)' ':
                     case (byte)'\r':
                        if (Sub0.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                     case (byte)'u':
                        nextSize -= 12;
                        if (nextSize < 0) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag += 12;
                        switch (*pfrag) {
                           case (byte)' ':
                           case (byte)'\r':
                              if (Sub1.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                           case (byte)'/':
                              nextSize -= 1;
                              if (nextSize < 0) {
                                  break;
                              }
                              pfrag += 1;
                              if (Sub2.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              else if (Sub3.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                        }
                        break;
                     case (byte)'a':
                        nextSize -= 6;
                        if (nextSize < 0) {
                            break;
                        }
                        pfrag += 6;
                        if (Sub4.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                     case (byte)'p':
                        nextSize -= 7;
                        if (nextSize < 0) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag += 7;
                        switch (*pfrag) {
                           case (byte)' ':
                           case (byte)'\r':
                              if (Sub7.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                           case (byte)'/':
                              nextSize -= 1;
                              if (nextSize < 0) {
                                  break;
                              }
                              pfrag += 1;
                              if (Sub8.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                           case (byte)'?':
                              nextSize -= 1;
                              if (nextSize < 0) {
                                  break;
                              }
                              pfrag += 1;
                              if (Sub9.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                        }
                        break;
                     case (byte)'d':
                        nextSize -= 10;
                        if (nextSize < 0) {
                            break;
                        }
                        pfrag += 10;
                        if (Sub10.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                  }
                  break;
               case (byte)'P':
                  nextSize -= 1;
                  if (nextSize < 0) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += 1;
                  switch (*pfrag) {
                     case (byte)'U':
                        nextSize -= 12;
                        if (nextSize < 0) {
                            break;
                        }
                        pfrag += 12;
                        if (Sub11.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                     case (byte)'O':
                        nextSize -= 5;
                        if (nextSize < 0) {
                            handler = null;
                            resource = null;
                            return false;
                        }
                        pfrag += 5;
                        switch (*pfrag) {
                           case (byte)'t':
                              nextSize -= 9;
                              if (nextSize < 0) {
                                  break;
                              }
                              pfrag += 9;
                              if (Sub12.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                           case (byte)'d':
                              nextSize -= 8;
                              if (nextSize < 0) {
                                  break;
                              }
                              pfrag += 8;
                              if (Sub13.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                                 return true;
                              break;
                        }
                        break;
                  }
                  break;
               case (byte)'D':
                  if (Sub14.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                     return true;
                  break;
            }
         }
         handler = null;
         resource = null;
         return false;
      }

      public class Sub0Processor : SingleRequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke();
            return true;
         }
      }

      public class Sub1Processor : SingleRequestProcessor<HttpRequest> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke(request);
            return true;
         }
      }

      public class Sub2Processor : SingleRequestProcessor<HttpRequest,Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(request, val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub3Processor : SingleRequestProcessor<String,HttpRequest> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            if (ParseUriString(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val, request);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub4Processor : RequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            int vsize = SizeToDelimiterOrEnd(fragment, size, '/');
            if (ParseUriString(fragment, vsize, out val)) {
               unsafe {
                  byte* pfrag = (byte*)fragment;
                  int nextSize = size;
                  nextSize -= vsize;
                  if (nextSize < 0) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += vsize;
                  switch (*pfrag) {
                     case (byte)' ':
                     case (byte)'\r':
                        if (Sub5.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                     case (byte)'/':
                        nextSize -= 1;
                        if (nextSize < 0) {
                            break;
                        }
                        pfrag += 1;
                        if (Sub6.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                  }
               }
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub5Processor : SingleRequestProcessor<String,HttpRequest> {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke(val1, request);
            return true;
         }
      }

      public class Sub6Processor : SingleRequestProcessor<String,Int32,HttpRequest> {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val1, val, request);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub7Processor : SingleRequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke();
            return true;
         }
      }

      public class Sub8Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub9Processor : SingleRequestProcessor<String> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            if (ParseUriString(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub10Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub11Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub12Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub13Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub14Processor : SingleRequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            handler = this;
            if (!invoke)
               resource = null;
            else
               resource = Code.Invoke();
            return true;
         }
      }
   }
}
