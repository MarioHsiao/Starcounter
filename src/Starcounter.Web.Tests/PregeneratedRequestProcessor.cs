// Generated code. This code matches, parses and invokes Http handlers. The code was generated by the Starcounter http/spdy handler engine.

using Starcounter;
using Starcounter.Internal;
using Starcounter.Internal.Uri;
using System.Text;
using System.Collections.Generic;
using System;
using HttpStructs;

namespace __urimatcher__ {

   public class GeneratedRequestProcessor : TopLevelRequestProcessor {

      public static int Sub1VerificationOffset = 0;
      public static int Sub2VerificationOffset = 25;
      public static int Sub3VerificationOffset = 50;
      public static int Sub4VerificationOffset = 50;
      public static int Sub5VerificationOffset = 75;
      public static byte[] VerificationBytes = new byte[] {(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'w',(byte)'h',(byte)'a',(byte)'t',(byte)'e',(byte)'v',(byte)'e',(byte)'r',(byte)'/',(byte)'@',(byte)'s',(byte)'/',(byte)'x',(byte)'x',(byte)'Y',(byte)'x',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'w',(byte)'h',(byte)'a',(byte)'t',(byte)'e',(byte)'v',(byte)'e',(byte)'r',(byte)'/',(byte)'@',(byte)'s',(byte)'/',(byte)'x',(byte)'x',(byte)'Z',(byte)'x',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'G',(byte)'E',(byte)'T',(byte)' ',(byte)'/',(byte)'w',(byte)'h',(byte)'a',(byte)'t',(byte)'m',(byte)'o',(byte)'r',(byte)'e',(byte)'/',(byte)'@',(byte)'s',(byte)'/',(byte)'x',(byte)'x',(byte)'Z',(byte)'x',(byte)'/',(byte)'@',(byte)'i',(byte)' ',(byte)'P',(byte)'U',(byte)'T',(byte)' ',(byte)'/',(byte)'p',(byte)'l',(byte)'a',(byte)'y',(byte)'e',(byte)'r',(byte)'s',(byte)'/',(byte)'@',(byte)'i',(byte)' '};
      public static IntPtr PointerVerificationBytes;

      public static Sub0Processor Sub0 = new Sub0Processor();
      public static Sub1Processor Sub1 = new Sub1Processor();
      public static Sub2Processor Sub2 = new Sub2Processor();
      public static Sub3Processor Sub3 = new Sub3Processor();
      public static Sub4Processor Sub4 = new Sub4Processor();
      public static Sub5Processor Sub5 = new Sub5Processor();

      public GeneratedRequestProcessor() {
          Registrations["GET /whatever/@s/xxYx/@i "] = Sub1;
          Registrations["GET /whatever/@s/xxZx/@i "] = Sub2;
          Registrations["GET /whatmore/@s/xxZx/@i "] = Sub4;
          Registrations["PUT /players/@i "] = Sub5;
          PointerVerificationBytes = BitsAndBytes.Alloc(VerificationBytes.Length); // TODO. Free when program exists
          BitsAndBytes.SlowMemCopy( PointerVerificationBytes, VerificationBytes, (uint)VerificationBytes.Length);
      }

      public override bool Process(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
         unsafe {
            byte* pfrag = (byte*)fragment;
            byte* ptempl = (byte*)PointerVerificationBytes;
            int nextSize = size;
            switch (*pfrag) {
               case (byte)'G':
                  nextSize -= 8;
                  if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += 8;
                  ptempl += 8;
                  nextSize --;
                  if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag ++;
                  ptempl ++;
                  switch (*pfrag) {
                     case (byte)'e':
                        nextSize -= 4;
                        if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                            break;
                        }
                        pfrag += 4;
                        ptempl += 4;
                        nextSize --;
                        if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                            break;
                        }
                        pfrag ++;
                        ptempl ++;
                        if (Sub0.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                     case (byte)'m':
                        ptempl += Sub3VerificationOffset;
                        nextSize -= 4;
                        if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                            break;
                        }
                        pfrag += 4;
                        ptempl += 4;
                        nextSize --;
                        if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                            break;
                        }
                        pfrag ++;
                        ptempl ++;
                        if (Sub3.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                  }
                  break;
               case (byte)'P':
                  ptempl += Sub5VerificationOffset;
                  nextSize -= 8;
                  if (nextSize<0 || (*(UInt64*)pfrag) != (*(UInt64*)ptempl) ) {
                      break;
                  }
                  pfrag += 8;
                  ptempl += 8;
                  nextSize -= 4;
                  if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                      break;
                  }
                  pfrag += 4;
                  ptempl += 4;
                  nextSize --;
                  if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                      break;
                  }
                  pfrag ++;
                  ptempl ++;
                  if (Sub5.SubProcess(uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                     return true;
                  break;
            }
         }
         handler = null;
         resource = null;
         return false;
      }

      public class Sub0Processor : RequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            int vsize = SizeToDelimiterOrEnd(fragment, size, '/');
            if (ParseUriString(fragment, vsize, out val)) {
               unsafe {
                  byte* pfrag = (byte*)fragment;
                  byte* ptempl = (byte*)PointerVerificationBytes;
                  int nextSize = size;
                  nextSize -= vsize;
                  if (nextSize < 0) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += vsize;
                  ptempl += Sub1VerificationOffset;
                  nextSize -= 2;
                  if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += 2;
                  ptempl += 2;
                  nextSize --;
                  if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag ++;
                  ptempl ++;
                  switch (*pfrag) {
                     case (byte)'Y':
                        ptempl += Sub1VerificationOffset;
                        nextSize -= 2;
                        if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                            break;
                        }
                        pfrag += 2;
                        ptempl += 2;
                        nextSize --;
                        if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                            break;
                        }
                        pfrag ++;
                        ptempl ++;
                        if (Sub1.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                     case (byte)'Z':
                        ptempl += Sub2VerificationOffset;
                        nextSize -= 2;
                        if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                            break;
                        }
                        pfrag += 2;
                        ptempl += 2;
                        nextSize --;
                        if (nextSize<0 || (*pfrag) != (*ptempl) ) {
                            break;
                        }
                        pfrag ++;
                        ptempl ++;
                        if (Sub2.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                           return true;
                        break;
                  }
               }
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub1Processor : SingleRequestProcessor<String,Int32> {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val1, val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub2Processor : SingleRequestProcessor<String,Int32> {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val1, val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub3Processor : RequestProcessor {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            string val;
            int vsize = SizeToDelimiterOrEnd(fragment, size, '/');
            if (ParseUriString(fragment, vsize, out val)) {
               unsafe {
                  byte* pfrag = (byte*)fragment;
                  byte* ptempl = (byte*)PointerVerificationBytes;
                  int nextSize = size;
                  nextSize -= vsize;
                  if (nextSize < 0) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += vsize;
                  ptempl += Sub4VerificationOffset;
                  nextSize -= 4;
                  if (nextSize<0 || (*(UInt32*)pfrag) !=  (*(UInt32*)ptempl) ) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += 4;
                  ptempl += 4;
                  nextSize -= 2;
                  if (nextSize<0 || (*(UInt16*)pfrag) != (*(UInt16*)ptempl) ) {
                      handler = null;
                      resource = null;
                      return false;
                  }
                  pfrag += 2;
                  ptempl += 2;
                  if (Sub4.SubProcess(val, uri, uriSize, (IntPtr)pfrag, nextSize, invoke, request, out handler, out resource))
                     return true;
               }
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub4Processor : SingleRequestProcessor<String,Int32> {

         public bool SubProcess(string val1, IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val1, val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }

      public class Sub5Processor : SingleRequestProcessor<Int32> {

         public bool SubProcess(IntPtr uri, int uriSize, IntPtr fragment, int size, bool invoke, HttpRequest request, out SingleRequestProcessorBase handler, out object resource) {
            int val;
            if (ParseUriInt(fragment, size, out val)) {
               handler = this;
               if (!invoke)
                  resource = null;
               else
                  resource = Code.Invoke(val);
               return true;
            }
            handler = null;
            resource = null;
            return false;
         }
      }
   }
}
