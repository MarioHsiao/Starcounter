// Generated code. This code serializes and deserializes Typed Json. The code was generated by Starcounter.

using System;
using System.Runtime.InteropServices;
using Starcounter;
using Starcounter.Internal;
using Starcounter.Internal.Application.CodeGeneration;
using Starcounter.Templates;
using Starcounter.XSON.Serializers;

namespace __starcountergenerated__ {
    public class PreGeneratedSerializer : TypedJsonSerializerBase {
#pragma warning disable 0219
#pragma warning disable 0168

#pragma warning disable 0414
        private static int VerificationOffset0 = 0; // PlayerId
        private static int VerificationOffset1 = 8; // Accounts
#pragma warning restore 0414
        private static byte[] VerificationBytes = new byte[] { (byte)'P', (byte)'l', (byte)'a', (byte)'y', (byte)'e', (byte)'r', (byte)'I', (byte)'d', (byte)'A', (byte)'c', (byte)'c', (byte)'o', (byte)'u', (byte)'n', (byte)'t', (byte)'s' };
        private static IntPtr PointerVerificationBytes;

        static PreGeneratedSerializer() {
            PointerVerificationBytes = Marshal.AllocHGlobal(VerificationBytes.Length); // TODO. Free when program exists
            Marshal.Copy(VerificationBytes, 0, PointerVerificationBytes, VerificationBytes.Length);
        }
        public override int PopulateFromJson(Obj realObj, IntPtr buffer, int bufferSize) {
            int valueSize;
            dynamic obj = realObj;
            unsafe {
                byte* pBuffer = (byte*)buffer;
                byte* pver = null;
                int leftBufferSize = bufferSize;
                while (leftBufferSize > 0) {
                    // Skip until start of next property or end of current object.
                    while (true) {
                        if (*pBuffer == '"')
                            break;
                        if (*pBuffer == '}') {
                            pBuffer++;
                            leftBufferSize--;
                            return (bufferSize - leftBufferSize);
                        }
                        pBuffer++;
                        leftBufferSize--;
                        if (leftBufferSize < 0)
                            JsonHelper.ThrowUnexpectedEndOfContentException();
                    }
                    pBuffer++;
                    leftBufferSize--;
                    if (leftBufferSize < 0)
                        JsonHelper.ThrowUnexpectedEndOfContentException();
                    switch (*pBuffer) {
                        case (byte)'A':
                            pBuffer++;
                            leftBufferSize--;
                            pver = ((byte*)PointerVerificationBytes + VerificationOffset1 + 1);
                            leftBufferSize -= 4;
                            if (leftBufferSize < 0 || (*(UInt32*)pBuffer) != (*(UInt32*)pver))
                                JsonHelper.ThrowPropertyNotFoundException("");
                            pBuffer += 4;
                            pver += 4;
                            leftBufferSize -= 2;
                            if (leftBufferSize < 0 || (*(UInt16*)pBuffer) != (*(UInt16*)pver))
                                JsonHelper.ThrowPropertyNotFoundException("");
                            pBuffer += 2;
                            pver += 2;
                            leftBufferSize--;
                            if (leftBufferSize < 0 || (*pBuffer) != (*pver))
                                JsonHelper.ThrowPropertyNotFoundException("");
                            pBuffer++;
                            pver++;
                            // Skip until start of value to parse.
                            while (*pBuffer != ':') {
                                pBuffer++;
                                leftBufferSize--;
                                if (leftBufferSize < 0)
                                    JsonHelper.ThrowUnexpectedEndOfContentException();
                            }
                            pBuffer++; // Skip ':' or ','
                            leftBufferSize--;
                            if (leftBufferSize < 0)
                                JsonHelper.ThrowUnexpectedEndOfContentException();
                            while (*pBuffer == ' ' || *pBuffer == '\n' || *pBuffer == '\r') {
                                pBuffer++;
                                leftBufferSize--;
                                if (leftBufferSize < 0)
                                    JsonHelper.ThrowUnexpectedEndOfContentException();
                            }
                            if (*pBuffer++ == '[') {
                                leftBufferSize--;
                                while (*pBuffer != '{' && *pBuffer != ']') { // find first object or end of array
                                    pBuffer++;
                                    leftBufferSize--;
                                }
                                if (*pBuffer != ']') {
                                    while (leftBufferSize > 0) {
                                        var val1 = obj.Accounts.Add();
                                        valueSize = val1.PopulateFromJson((IntPtr)pBuffer, leftBufferSize);
                                        if (valueSize != -1) {
                                            leftBufferSize -= valueSize;
                                            if (leftBufferSize < 0) {
                                                JsonHelper.ThrowUnexpectedEndOfContentException();
                                            }
                                            pBuffer += valueSize;
                                        } else {
                                            JsonHelper.ThrowWrongValueTypeException(null, "Accounts", "Arr`1", "");
                                        }
                                        // Skip until start of value to parse.
                                        while (*pBuffer != ',') {
                                            if (*pBuffer == ']')
                                                break;
                                            pBuffer++;
                                            leftBufferSize--;
                                            if (leftBufferSize < 0)
                                                JsonHelper.ThrowUnexpectedEndOfContentException();
                                        }
                                        if (*pBuffer == ']')
                                            break;
                                        pBuffer++; // Skip ':' or ','
                                        leftBufferSize--;
                                        if (leftBufferSize < 0)
                                            JsonHelper.ThrowUnexpectedEndOfContentException();
                                        while (*pBuffer == ' ' || *pBuffer == '\n' || *pBuffer == '\r') {
                                            pBuffer++;
                                            leftBufferSize--;
                                            if (leftBufferSize < 0)
                                                JsonHelper.ThrowUnexpectedEndOfContentException();
                                        }
                                    }
                                }
                            } else
                                JsonHelper.ThrowWrongValueTypeException(null, "Accounts", "Arr`1", "");
                            break;
                        case (byte)'P':
                            pBuffer++;
                            leftBufferSize--;
                            pver = ((byte*)PointerVerificationBytes + VerificationOffset0 + 1);
                            leftBufferSize -= 4;
                            if (leftBufferSize < 0 || (*(UInt32*)pBuffer) != (*(UInt32*)pver))
                                JsonHelper.ThrowPropertyNotFoundException("");
                            pBuffer += 4;
                            pver += 4;
                            leftBufferSize -= 2;
                            if (leftBufferSize < 0 || (*(UInt16*)pBuffer) != (*(UInt16*)pver))
                                JsonHelper.ThrowPropertyNotFoundException("");
                            pBuffer += 2;
                            pver += 2;
                            leftBufferSize--;
                            if (leftBufferSize < 0 || (*pBuffer) != (*pver))
                                JsonHelper.ThrowPropertyNotFoundException("");
                            pBuffer++;
                            pver++;
                            // Skip until start of value to parse.
                            while (*pBuffer != ':') {
                                pBuffer++;
                                leftBufferSize--;
                                if (leftBufferSize < 0)
                                    JsonHelper.ThrowUnexpectedEndOfContentException();
                            }
                            pBuffer++; // Skip ':' or ','
                            leftBufferSize--;
                            if (leftBufferSize < 0)
                                JsonHelper.ThrowUnexpectedEndOfContentException();
                            while (*pBuffer == ' ' || *pBuffer == '\n' || *pBuffer == '\r') {
                                pBuffer++;
                                leftBufferSize--;
                                if (leftBufferSize < 0)
                                    JsonHelper.ThrowUnexpectedEndOfContentException();
                            }
                            Int64 val0;
                            if (JsonHelper.ParseInt((IntPtr)pBuffer, leftBufferSize, out val0, out valueSize)) {
                                obj.PlayerId = val0;
                                leftBufferSize -= valueSize;
                                if (leftBufferSize < 0) {
                                    JsonHelper.ThrowUnexpectedEndOfContentException();
                                }
                                pBuffer += valueSize;
                            } else {
                                JsonHelper.ThrowWrongValueTypeException(null, "PlayerId", "Int64", "");
                            }
                            break;
                    }
                }
                throw ErrorCode.ToException(Starcounter.Internal.Error.SCERRUNSPECIFIED, "char: '" + (char)*pBuffer + "', offset: " + (bufferSize - leftBufferSize) + "");
            }
        }
#pragma warning restore 0168
#pragma warning restore 0219
    }
}


