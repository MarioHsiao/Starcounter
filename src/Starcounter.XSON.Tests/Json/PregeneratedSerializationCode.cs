//// Generated code. This code serializes and deserializes Typed Json. The code was generated by Starcounter.

//using System;
//using System.Runtime.InteropServices;
//using Starcounter;
//using Starcounter.Advanced.XSON;

//namespace __starcountergenerated__ {
//	public class PreGeneratedSerializer : StandardJsonSerializerBase {
//#pragma warning disable 0219
//#pragma warning disable 0168

//#pragma warning disable 0414
//		private static int VerificationOffset0 = 0; // PlayerId
//		private static int VerificationOffset1 = 8; // Name
//		private static int VerificationOffset2 = 12; // DecValue
//		private static int VerificationOffset3 = 20; // DblValue
//		private static int VerificationOffset4 = 28; // BoolValue
//#pragma warning restore 0414
//		private static byte[] VerificationBytes = new byte[] { (byte)'P', (byte)'l', (byte)'a', (byte)'y', (byte)'e', (byte)'r', (byte)'I', (byte)'d', (byte)'N', (byte)'a', (byte)'m', (byte)'e', (byte)'D', (byte)'e', (byte)'c', (byte)'V', (byte)'a', (byte)'l', (byte)'u', (byte)'e', (byte)'D', (byte)'b', (byte)'l', (byte)'V', (byte)'a', (byte)'l', (byte)'u', (byte)'e', (byte)'B', (byte)'o', (byte)'o', (byte)'l', (byte)'V', (byte)'a', (byte)'l', (byte)'u', (byte)'e' };
//		private static IntPtr PointerVerificationBytes;

//		static PreGeneratedSerializer() {
//			PointerVerificationBytes = Marshal.AllocHGlobal(VerificationBytes.Length); // TODO. Free when program exists
//			Marshal.Copy(VerificationBytes, 0, PointerVerificationBytes, VerificationBytes.Length);
//		}
//		public override int Populate(Json json, IntPtr buffer, int bufferSize) {
//			int valueSize;
//			dynamic obj = json;
//			unsafe {
//				byte* pBuffer = (byte*)buffer;
//				byte* tmpBuffer = pBuffer;
//				byte* pver = null;
//				int leftBufferSize = bufferSize;
//				int tmpLeftSize = leftBufferSize;
//				while (*pBuffer != '{') {
//					if (*pBuffer == '\n' || *pBuffer == '\r' || *pBuffer == '\t' || *pBuffer == ' ') {
//						leftBufferSize--;
//						if (leftBufferSize < 0)
//							JsonHelper.ThrowInvalidJsonException("Beginning of object not found ('{').");
//						pBuffer++;
//					} else
//						JsonHelper.ThrowInvalidJsonException("Unexpected character found, expected '{' but found '" + (char)*pBuffer + "'.");
//				}
//				while (leftBufferSize > 0) {
//					// Skip until start of next property or end of current object.
//					while (true) {
//						if (*pBuffer == '}') {
//							pBuffer++;
//							leftBufferSize--;
//							return (bufferSize - leftBufferSize);
//						}
//						if (*pBuffer == ',' || *pBuffer == ' ' || *pBuffer == '\n'
//							|| *pBuffer == '\r' || *pBuffer == '\t' || *pBuffer == '{') {
//							leftBufferSize--;
//							if (leftBufferSize < 0)
//								JsonHelper.ThrowUnexpectedEndOfContentException();
//							pBuffer++;
//							continue;
//						}
//						if (*pBuffer == '"') {
//							leftBufferSize--;
//							if (leftBufferSize < 0)
//								JsonHelper.ThrowUnexpectedEndOfContentException();
//							pBuffer++;
//						}
//						break;
//					}
//					switch (*pBuffer) {
//						case (byte)'D':
//							tmpBuffer = pBuffer;
//							tmpLeftSize = leftBufferSize;
//							pBuffer++;
//							leftBufferSize--;
//							switch (*pBuffer) {
//								case (byte)'b':
//									tmpBuffer = pBuffer;
//									tmpLeftSize = leftBufferSize;
//									pBuffer++;
//									leftBufferSize--;
//									pver = ((byte*)PointerVerificationBytes + VerificationOffset3 + 2);
//									leftBufferSize -= 4;
//									if (leftBufferSize < 0 || (*(UInt32*)pBuffer) != (*(UInt32*)pver))
//										JsonHelper.ThrowPropertyNotFoundException((IntPtr)tmpBuffer, tmpLeftSize);
//									pBuffer += 4;
//									pver += 4;
//									leftBufferSize -= 2;
//									if (leftBufferSize < 0 || (*(UInt16*)pBuffer) != (*(UInt16*)pver))
//										JsonHelper.ThrowPropertyNotFoundException((IntPtr)tmpBuffer, tmpLeftSize);
//									pBuffer += 2;
//									pver += 2;
//									// Skip until start of value to parse.
//									while (*pBuffer != ':') {
//										leftBufferSize--;
//										if (leftBufferSize < 0)
//											JsonHelper.ThrowUnexpectedEndOfContentException();
//										pBuffer++;
//									}
//									pBuffer++; // Skip ':' or ','
//									leftBufferSize--;
//									if (leftBufferSize < 0)
//										JsonHelper.ThrowUnexpectedEndOfContentException();
//									while (*pBuffer == ' ' || *pBuffer == '\n' || *pBuffer == '\r') {
//										leftBufferSize--;
//										if (leftBufferSize < 0)
//											JsonHelper.ThrowUnexpectedEndOfContentException();
//										pBuffer++;
//									}
//									Double val3;
//									if (JsonHelper.ParseDouble((IntPtr)pBuffer, leftBufferSize, out val3, out valueSize)) {
//										obj.DblValue = val3;
//										leftBufferSize -= valueSize;
//										if (leftBufferSize < 0) {
//											JsonHelper.ThrowUnexpectedEndOfContentException();
//										}
//										pBuffer += valueSize;
//									} else {
//										JsonHelper.ThrowWrongValueTypeException(null, "DblValue", "Double", "");
//									}
//									// TODO! Parse value for Double
//									break;
//								case (byte)'e':
//									tmpBuffer = pBuffer;
//									tmpLeftSize = leftBufferSize;
//									pBuffer++;
//									leftBufferSize--;
//									pver = ((byte*)PointerVerificationBytes + VerificationOffset2 + 2);
//									leftBufferSize -= 4;
//									if (leftBufferSize < 0 || (*(UInt32*)pBuffer) != (*(UInt32*)pver))
//										JsonHelper.ThrowPropertyNotFoundException((IntPtr)tmpBuffer, tmpLeftSize);
//									pBuffer += 4;
//									pver += 4;
//									leftBufferSize -= 2;
//									if (leftBufferSize < 0 || (*(UInt16*)pBuffer) != (*(UInt16*)pver))
//										JsonHelper.ThrowPropertyNotFoundException((IntPtr)tmpBuffer, tmpLeftSize);
//									pBuffer += 2;
//									pver += 2;
//									// Skip until start of value to parse.
//									while (*pBuffer != ':') {
//										leftBufferSize--;
//										if (leftBufferSize < 0)
//											JsonHelper.ThrowUnexpectedEndOfContentException();
//										pBuffer++;
//									}
//									pBuffer++; // Skip ':' or ','
//									leftBufferSize--;
//									if (leftBufferSize < 0)
//										JsonHelper.ThrowUnexpectedEndOfContentException();
//									while (*pBuffer == ' ' || *pBuffer == '\n' || *pBuffer == '\r') {
//										leftBufferSize--;
//										if (leftBufferSize < 0)
//											JsonHelper.ThrowUnexpectedEndOfContentException();
//										pBuffer++;
//									}
//									Decimal val2;
//									if (JsonHelper.ParseDecimal((IntPtr)pBuffer, leftBufferSize, out val2, out valueSize)) {
//										obj.DecValue = val2;
//										leftBufferSize -= valueSize;
//										if (leftBufferSize < 0) {
//											JsonHelper.ThrowUnexpectedEndOfContentException();
//										}
//										pBuffer += valueSize;
//									} else {
//										JsonHelper.ThrowWrongValueTypeException(null, "DecValue", "Decimal", "");
//									}
//									// TODO! Parse value for Decimal
//									break;
//								default:
//									JsonHelper.ThrowPropertyNotFoundException((IntPtr)pBuffer, leftBufferSize);
//									break;
//							}
//							break;
//						case (byte)'B':
//							tmpBuffer = pBuffer;
//							tmpLeftSize = leftBufferSize;
//							pBuffer++;
//							leftBufferSize--;
//							pver = ((byte*)PointerVerificationBytes + VerificationOffset4 + 1);
//							leftBufferSize -= 8;
//							if (leftBufferSize < 0 || (*(UInt64*)pBuffer) != (*(UInt64*)pver))
//								JsonHelper.ThrowPropertyNotFoundException((IntPtr)tmpBuffer, tmpLeftSize);
//							pBuffer += 8;
//							pver += 8;
//							// Skip until start of value to parse.
//							while (*pBuffer != ':') {
//								leftBufferSize--;
//								if (leftBufferSize < 0)
//									JsonHelper.ThrowUnexpectedEndOfContentException();
//								pBuffer++;
//							}
//							pBuffer++; // Skip ':' or ','
//							leftBufferSize--;
//							if (leftBufferSize < 0)
//								JsonHelper.ThrowUnexpectedEndOfContentException();
//							while (*pBuffer == ' ' || *pBuffer == '\n' || *pBuffer == '\r') {
//								leftBufferSize--;
//								if (leftBufferSize < 0)
//									JsonHelper.ThrowUnexpectedEndOfContentException();
//								pBuffer++;
//							}
//							Boolean val4;
//							if (JsonHelper.ParseBoolean((IntPtr)pBuffer, leftBufferSize, out val4, out valueSize)) {
//								obj.BoolValue = val4;
//								leftBufferSize -= valueSize;
//								if (leftBufferSize < 0) {
//									JsonHelper.ThrowUnexpectedEndOfContentException();
//								}
//								pBuffer += valueSize;
//							} else {
//								JsonHelper.ThrowWrongValueTypeException(null, "BoolValue", "Boolean", "");
//							}
//							// TODO! Parse value for Boolean
//							break;
//						case (byte)'P':
//							tmpBuffer = pBuffer;
//							tmpLeftSize = leftBufferSize;
//							pBuffer++;
//							leftBufferSize--;
//							pver = ((byte*)PointerVerificationBytes + VerificationOffset0 + 1);
//							leftBufferSize -= 4;
//							if (leftBufferSize < 0 || (*(UInt32*)pBuffer) != (*(UInt32*)pver))
//								JsonHelper.ThrowPropertyNotFoundException((IntPtr)tmpBuffer, tmpLeftSize);
//							pBuffer += 4;
//							pver += 4;
//							leftBufferSize -= 2;
//							if (leftBufferSize < 0 || (*(UInt16*)pBuffer) != (*(UInt16*)pver))
//								JsonHelper.ThrowPropertyNotFoundException((IntPtr)tmpBuffer, tmpLeftSize);
//							pBuffer += 2;
//							pver += 2;
//							leftBufferSize--;
//							if (leftBufferSize < 0 || (*pBuffer) != (*pver))
//								JsonHelper.ThrowPropertyNotFoundException((IntPtr)tmpBuffer, tmpLeftSize);
//							pBuffer++;
//							pver++;
//							// Skip until start of value to parse.
//							while (*pBuffer != ':') {
//								leftBufferSize--;
//								if (leftBufferSize < 0)
//									JsonHelper.ThrowUnexpectedEndOfContentException();
//								pBuffer++;
//							}
//							pBuffer++; // Skip ':' or ','
//							leftBufferSize--;
//							if (leftBufferSize < 0)
//								JsonHelper.ThrowUnexpectedEndOfContentException();
//							while (*pBuffer == ' ' || *pBuffer == '\n' || *pBuffer == '\r') {
//								leftBufferSize--;
//								if (leftBufferSize < 0)
//									JsonHelper.ThrowUnexpectedEndOfContentException();
//								pBuffer++;
//							}
//							Int64 val0;
//							if (JsonHelper.ParseInt((IntPtr)pBuffer, leftBufferSize, out val0, out valueSize)) {
//								obj.PlayerId = val0;
//								leftBufferSize -= valueSize;
//								if (leftBufferSize < 0) {
//									JsonHelper.ThrowUnexpectedEndOfContentException();
//								}
//								pBuffer += valueSize;
//							} else {
//								JsonHelper.ThrowWrongValueTypeException(null, "PlayerId", "Int64", "");
//							}
//							// TODO! Parse value for Int64
//							break;
//						case (byte)'N':
//							tmpBuffer = pBuffer;
//							tmpLeftSize = leftBufferSize;
//							pBuffer++;
//							leftBufferSize--;
//							pver = ((byte*)PointerVerificationBytes + VerificationOffset1 + 1);
//							leftBufferSize -= 2;
//							if (leftBufferSize < 0 || (*(UInt16*)pBuffer) != (*(UInt16*)pver))
//								JsonHelper.ThrowPropertyNotFoundException((IntPtr)tmpBuffer, tmpLeftSize);
//							pBuffer += 2;
//							pver += 2;
//							leftBufferSize--;
//							if (leftBufferSize < 0 || (*pBuffer) != (*pver))
//								JsonHelper.ThrowPropertyNotFoundException((IntPtr)tmpBuffer, tmpLeftSize);
//							pBuffer++;
//							pver++;
//							// Skip until start of value to parse.
//							while (*pBuffer != ':') {
//								leftBufferSize--;
//								if (leftBufferSize < 0)
//									JsonHelper.ThrowUnexpectedEndOfContentException();
//								pBuffer++;
//							}
//							pBuffer++; // Skip ':' or ','
//							leftBufferSize--;
//							if (leftBufferSize < 0)
//								JsonHelper.ThrowUnexpectedEndOfContentException();
//							while (*pBuffer == ' ' || *pBuffer == '\n' || *pBuffer == '\r') {
//								leftBufferSize--;
//								if (leftBufferSize < 0)
//									JsonHelper.ThrowUnexpectedEndOfContentException();
//								pBuffer++;
//							}
//							String val1;
//							if (JsonHelper.ParseString((IntPtr)pBuffer, leftBufferSize, out val1, out valueSize)) {
//								obj.Name = val1;
//								leftBufferSize -= valueSize;
//								if (leftBufferSize < 0) {
//									JsonHelper.ThrowUnexpectedEndOfContentException();
//								}
//								pBuffer += valueSize;
//							} else {
//								JsonHelper.ThrowWrongValueTypeException(null, "Name", "String", "");
//							}
//							// TODO! Parse value for String
//							break;
//						default:
//							JsonHelper.ThrowPropertyNotFoundException((IntPtr)pBuffer, leftBufferSize);
//							break;
//					}
//				}
//				throw ErrorCode.ToException(Starcounter.Internal.Error.SCERRUNSPECIFIED, "char: '" + (char)*pBuffer + "', offset: " + (bufferSize - leftBufferSize) + "");
//			}
//		}
//#pragma warning restore 0168
//#pragma warning restore 0219
//	}
//}


