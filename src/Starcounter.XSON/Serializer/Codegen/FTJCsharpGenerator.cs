using System;
using System.Text;
using Starcounter.Templates;
using Starcounter.XSON.Serializer.Ast;

namespace Starcounter.XSON.Serializer {
	internal class FTJCSharpGenerator {
		private FTJDomGenerator domGenerator;

		internal FTJCSharpGenerator(FTJDomGenerator domGenerator) {
			this.domGenerator = domGenerator;
		}

		internal string GenerateCode() {
			AstRoot domTree = domGenerator.GenerateDomTree();
			StringBuilder output = new StringBuilder();

			ProcessNode(domTree);
			WriteNode(domTree, output);

			return output.ToString();
		}

		private void WriteNode(AstBase node, StringBuilder output) {
			foreach (var x in node.Prefix) {
				output.Append(' ', node.Indentation);
				output.Append(x);
				output.Append('\n');
			}
			foreach (var kid in node.Children) {
				kid.Indentation = node.Indentation + 4;
				WriteNode(kid, output);
			}
			foreach (var x in node.Suffix) {
				output.Append(' ', node.Indentation);
				output.Append(x);
				output.Append('\n');
			}
		}

		private void ProcessNode(AstBase node) {
			if (node is AstRoot) {
				ProcessHeader((AstRoot)node);
			} else if (node is AstJsonSerializerClass) {
				ProcessSerializerClass((AstJsonSerializerClass)node);
			} else if (node is AstSerializeFunction) {
				throw new NotImplementedException("TODO!");
			} else if (node is AstDeserializeFunction) {
				ProcessDeserializer((AstDeserializeFunction)node);
			} else if (node is AstJsonProperty) {
				ProcessProperty((AstJsonProperty)node);
			} else {
				throw new Exception("Unknown node in DomTree. Unable top generate code.");
			}

			foreach (AstBase child in node.Children) {
				ProcessNode(child);
			}
		}

		private void ProcessHeader(AstRoot node) {
			node.Prefix.Add("// Generated code. This code serializes and deserializes Typed Json. The code was generated by Starcounter.");
			node.Prefix.Add("");
			node.Prefix.Add("using System;");
			node.Prefix.Add("using System.Collections.Generic;");
			node.Prefix.Add("using System.Globalization;");
			node.Prefix.Add("using System.Runtime.InteropServices;");
			node.Prefix.Add("using Starcounter;");
			node.Prefix.Add("using Starcounter.Internal;");
			node.Prefix.Add("using Starcounter.Templates;");
			node.Prefix.Add("using Starcounter.Advanced.XSON;");
			node.Prefix.Add("");
			
			if (!string.IsNullOrEmpty(node.SerializerClass.Namespace)) {
				node.Prefix.Add("namespace " + node.SerializerClass.Namespace + " {");
				node.Suffix.Add("}");
			}
		}

		private void ProcessSerializerClass(AstJsonSerializerClass node) {
			node.Prefix.Add("public class " + node.ClassName + " : " + node.Inherits + " {");
			node.Prefix.Add("#pragma warning disable 0219");
			node.Prefix.Add("#pragma warning disable 0168");

			node.Suffix.Add("#pragma warning restore 0168");
			node.Suffix.Add("#pragma warning restore 0219");
			node.Suffix.Add("}");
		}

		private void ProcessDeserializer(AstDeserializeFunction node) {
			var template = this.domGenerator.Template;
			int valueCount = template.Properties.ExposedProperties.Count;

			node.Prefix.Add("public override int Populate(Json obj, IntPtr buffer, int bufferSize) {");
			node.Prefix.Add("    unsafe {");
			node.Prefix.Add("        var reader = new TupleReaderBase64((byte*)buffer, " + valueCount + ");");
			node.Prefix.Add("        Json arr;");
			node.Prefix.Add("        Json childObj;");
			node.Prefix.Add("        TObject tObj = (TObject)obj.Template;");
			node.Prefix.Add("        Template tProperty;");
			node.Prefix.Add("        String valueAsStr;");
			node.Prefix.Add("        ulong valueAsULong;");
			node.Prefix.Add("        TupleReaderBase64 arrReader;");
			node.Prefix.Add("        TupleReaderBase64 itemReader;");
			node.Prefix.Add("        int arrItemCount;");
			node.Suffix.Add("        return (int)reader.ReadByteCount;");
			node.Suffix.Add("    }");
			node.Suffix.Add("}");
		}

		private void ProcessProperty(AstJsonProperty node) {
			Template template = node.Template;

			node.Prefix.Add("tProperty = tObj.Properties[" + template.TemplateIndex + "];");
			if (template is TBool) {
				node.Prefix.Add("if (reader.ReadULong() == 1) obj.Set((TBool)tProperty, true);");
				node.Prefix.Add("else obj.Set((TBool)tProperty, false);");
			} else if (template is TDecimal) {
				node.Prefix.Add("valueAsStr = reader.ReadString();");
				node.Prefix.Add("obj.Set((TDecimal)tProperty, Decimal.Parse(valueAsStr, CultureInfo.InvariantCulture));");
			} else if (template is TDouble) {
				node.Prefix.Add("valueAsStr = reader.ReadString();");
				node.Prefix.Add("obj.Set((TDouble)tProperty, Double.Parse(valueAsStr, CultureInfo.InvariantCulture));");
			} else if (template is TLong) {
				node.Prefix.Add("obj.Set((TLong)tProperty, reader.ReadLong());");
			} else if (template is TString) {
				node.Prefix.Add("obj.Set((TString)tProperty, reader.ReadString());");
			} else if (template is TObject) {
				node.Prefix.Add("childObj = obj.Get((TObject)tProperty);");
				node.Prefix.Add("((TContainer)childObj.Template).PopulateFromFasterThanJson(childObj, (IntPtr)reader.AtEnd, 0);");
				node.Prefix.Add("reader.Skip();");
			} else if (template is TObjArr) {
				node.Prefix.Add("arr = obj.Get((TObjArr)tProperty);");
				node.Prefix.Add("arrReader = new TupleReaderBase64(reader.AtEnd, 2);");
				node.Prefix.Add("arrItemCount = (int)arrReader.ReadULong();");
				node.Prefix.Add("itemReader = new TupleReaderBase64(arrReader.AtEnd, (uint)arrItemCount);");

				node.Prefix.Add("for (int aic = 0; aic < arrItemCount; aic++) {");
				node.Prefix.Add("	childObj = arr.Add();");
				node.Prefix.Add("	((TContainer)childObj.Template).PopulateFromFasterThanJson(childObj, (IntPtr)itemReader.AtEnd, 0);");
				node.Prefix.Add("	itemReader.Skip();");
				node.Prefix.Add("}");
				node.Prefix.Add("arrReader.Skip();");
				node.Prefix.Add("reader.Skip();");
			} else {
				throw new NotSupportedException("Could not generate code for reading value for template " + template.TemplateName);
			}
		}

	}
}
