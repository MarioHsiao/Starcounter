using System;
using System.Text;
using Starcounter.Templates;
using Starcounter.XSON.Serializer.Ast;
using Starcounter.XSON.Serializer.Parsetree;

namespace Starcounter.XSON.Serializer {
	internal class StdCSharpGenerator {
		private StdDomGenerator domGenerator;

		internal StdCSharpGenerator(StdDomGenerator domGenerator) {
			this.domGenerator = domGenerator;
		}

		internal string GenerateCode() {
			AstRoot domTree = domGenerator.GenerateDomTree();
			StringBuilder output = new StringBuilder();

			ProcessNode(domTree);
			WriteNode(domTree, output);

			return output.ToString();
		}

		private void WriteNode(AstBase node, StringBuilder output) {
			foreach (var x in node.Prefix) {
				output.Append(' ', node.Indentation);
				output.Append(x);
				output.Append('\n');
			}
			foreach (var kid in node.Children) {
				kid.Indentation = node.Indentation + 4;
				WriteNode(kid, output);
			}
			foreach (var x in node.Suffix) {
				output.Append(' ', node.Indentation);
				output.Append(x);
				output.Append('\n');
			}
		}

		private void ProcessNode(AstBase node) {
			if (node is AstRoot) {
				ProcessHeader((AstRoot)node);
			} else if (node is AstJsonSerializerClass) {
				ProcessSerializerClass((AstJsonSerializerClass)node);
			} else if (node is AstSerializeFunction) {
				throw new NotImplementedException("TODO!");
			} else if (node is AstDeserializeFunction) {
				ProcessDeserializer((AstDeserializeFunction)node);
			} else if (node is AstJSConstructor) {
				ProcessCst((AstJSConstructor)node);
			} else if (node is AstWhile) {
				ProcessWhile((AstWhile)node);
			} else if (node is AstGotoProperty) {
				ProcessGotoProperty((AstGotoProperty)node);
			} else if (node is AstGotoValue) {
				ProcessGotoValue((AstGotoValue)node);
			} else if (node is AstSwitch) {
				ProcessSwitch((AstSwitch)node);
			} else if (node is AstCase) {
				ProcessCase((AstCase)node);
			} else if (node is AstJsonProperty) {
				ProcessProperty((AstJsonProperty)node);
			} else if (node is AstVerifier) {
				ProcessVerifier((AstVerifier)node);
			} else {
				throw new Exception("Unknown node in DomTree. Unable top generate code.");
			}

			foreach (AstBase child in node.Children) {
				ProcessNode(child);
			}
		}

		private void ProcessHeader(AstRoot node) {
			node.Prefix.Add("// Generated code. This code serializes and deserializes Typed Json. The code was generated by Starcounter.");
			node.Prefix.Add("");
			node.Prefix.Add("using System;");
			node.Prefix.Add("using System.Runtime.InteropServices;");
			node.Prefix.Add("using Starcounter;");
			node.Prefix.Add("using Starcounter.Advanced.XSON;");
			node.Prefix.Add("");
			
			if (!string.IsNullOrEmpty(node.SerializerClass.Namespace)) {
				node.Prefix.Add("namespace " + node.SerializerClass.Namespace + " {");
				node.Suffix.Add("}");
			}
		}

		private void ProcessSerializerClass(AstJsonSerializerClass node) {
			node.Prefix.Add("public class " + node.ClassName + " : " + node.Inherits + " {");
			node.Prefix.Add("#pragma warning disable 0219");
			node.Prefix.Add("#pragma warning disable 0168");

			node.Suffix.Add("#pragma warning restore 0168");
			node.Suffix.Add("#pragma warning restore 0219");
			node.Suffix.Add("}");
		}

		private void ProcessCst(AstJSConstructor cst) {
			bool comma;
			int t;
			TemplateMetadata md;
			StringBuilder sb;
			AstJsonSerializerClass jsClass = (AstJsonSerializerClass)cst.Parent;

			sb = new StringBuilder();
			sb.Append("private static byte[] VerificationBytes = new byte[] {");

			cst.Prefix.Add("");
			comma = false;
			t = 0;

			cst.Prefix.Add("#pragma warning disable 0414");
			for (int h = 0; h < cst.ParseNode.AllTemplates.Count; h++) {
				md = cst.ParseNode.AllTemplates[h];
				cst.Prefix.Add("private static int VerificationOffset" + h + " = " + t + "; // " + md.TemplateName);

				char c;
				string pvu = md.TemplateName;
				for (int i = 0; i < pvu.Length; i++) {
					c = pvu[i];

					if (comma)
						sb.Append(',');
					sb.Append("(byte)'");
					sb.Append(c);
					sb.Append('\'');
					t++;
					comma = true;
				}
			}
			cst.Prefix.Add("#pragma warning restore 0414");

			sb.Append("};");
			cst.Prefix.Add(sb.ToString());
			cst.Prefix.Add("private static IntPtr PointerVerificationBytes;");
			cst.Prefix.Add("");

			cst.Prefix.Add("static " + jsClass.ClassName + "() {");
			cst.Prefix.Add("    PointerVerificationBytes = Marshal.AllocHGlobal(VerificationBytes.Length); // TODO. Free when program exists");
			cst.Prefix.Add("    Marshal.Copy(VerificationBytes, 0, PointerVerificationBytes, VerificationBytes.Length);");
			cst.Suffix.Add("}");
		}

		private void ProcessDeserializer(AstDeserializeFunction node) {
			node.Prefix.Add("public override int Populate(Json json, IntPtr buffer, int bufferSize, JsonSerializerSettings settings = null) {");
			node.Prefix.Add("    int valueSize;");
			node.Prefix.Add("    dynamic obj = json;");
            node.Prefix.Add("    if (settings == null) settings = TypedJsonSerializer.DefaultSettings;");

            node.Prefix.Add("    unsafe {");
			node.Prefix.Add("        byte* pBuffer = (byte*)buffer;");
			node.Prefix.Add("		 byte* tmpBuffer = pBuffer;");
			node.Prefix.Add("	     byte* pver = null;");
			node.Prefix.Add("        int leftBufferSize = bufferSize;");
			node.Prefix.Add("        int tmpLeftSize = leftBufferSize;");

			// Goto beginning of object.
			node.Prefix.Add("        while (*pBuffer != '{') {");
			node.Prefix.Add("             if (*pBuffer == '\\n' || *pBuffer == '\\r' || *pBuffer == '\\t' || *pBuffer == ' ') {");
			node.Prefix.Add("                  leftBufferSize--;");
			node.Prefix.Add("                  if (leftBufferSize < 0)");
			node.Prefix.Add("                       JsonHelper.ThrowInvalidJsonException(\"Beginning of object not found ('{').\");");
			node.Prefix.Add("                  pBuffer++;");
			node.Prefix.Add("             } else");
			node.Prefix.Add("             JsonHelper.ThrowInvalidJsonException(\"Unexpected character found, expected '{' but found '\" + (char)*pBuffer + \"'.\");");
			node.Prefix.Add("        }");

			node.Suffix.Add("        throw ErrorCode.ToException(Starcounter.Internal.Error.SCERRUNSPECIFIED, \"char: '\" + (char)*pBuffer + \"', offset: \" + (bufferSize - leftBufferSize) + \"\");");
			node.Suffix.Add("    }");
			node.Suffix.Add("}");
		}

		private void ProcessWhile(AstWhile node) {
			node.Prefix.Add("while (leftBufferSize > 0) {");
			node.Suffix.Add("}");
		}

		private void ProcessGotoProperty(AstGotoProperty node) {
			node.Prefix.Add("// Skip until start of next property or end of current object.");
			node.Prefix.Add("while (true) {");
			node.Prefix.Add("    if (*pBuffer == '}') {");
			node.Prefix.Add("        pBuffer++;");
			node.Prefix.Add("        leftBufferSize--;");
			node.Prefix.Add("        return (bufferSize - leftBufferSize);");
			node.Prefix.Add("    }");
			node.Prefix.Add("    if (*pBuffer == ',' || *pBuffer == ' ' || *pBuffer == '\\n'");
			node.Prefix.Add("        || *pBuffer == '\\r' || *pBuffer == '\\t' || *pBuffer == '{') {");
			node.Prefix.Add("        leftBufferSize--;");
			node.Prefix.Add("        if (leftBufferSize < 0)");
			node.Prefix.Add("            JsonHelper.ThrowUnexpectedEndOfContentException();");
			node.Prefix.Add("        pBuffer++;");
			node.Prefix.Add("        continue;");
			node.Prefix.Add("    }");
			node.Prefix.Add("    if (*pBuffer == '\"'){");
			node.Prefix.Add("        leftBufferSize--;");
			node.Prefix.Add("        if (leftBufferSize < 0)");
			node.Prefix.Add("            JsonHelper.ThrowUnexpectedEndOfContentException();");
			node.Prefix.Add("        pBuffer++;");
			node.Prefix.Add("    }");
			node.Prefix.Add("    break;");
			node.Prefix.Add("}");
		}

		private void ProcessGotoValue(Ast.AstGotoValue node) {
			node.Prefix.Add("// Skip until start of value to parse.");
			node.Prefix.Add("while (*pBuffer != ':') {");
			node.Prefix.Add("    leftBufferSize--;");
			node.Prefix.Add("    if (leftBufferSize < 0)");
			node.Prefix.Add("         JsonHelper.ThrowUnexpectedEndOfContentException();");
			node.Prefix.Add("    pBuffer++;");
			node.Prefix.Add("}");
			node.Prefix.Add("pBuffer++; // Skip ':' or ','");
			node.Prefix.Add("leftBufferSize--;");
			node.Prefix.Add("if (leftBufferSize < 0)");
			node.Prefix.Add("    JsonHelper.ThrowUnexpectedEndOfContentException();");
			node.Prefix.Add("while (*pBuffer == ' ' || *pBuffer == '\\n' || *pBuffer == '\\r') {");
			node.Prefix.Add("    leftBufferSize--;");
			node.Prefix.Add("    if (leftBufferSize < 0)");
			node.Prefix.Add("         JsonHelper.ThrowUnexpectedEndOfContentException();");
			node.Prefix.Add("    pBuffer++;");
			node.Prefix.Add("}");	
		}

		private void ProcessSwitch(Ast.AstSwitch node) {
			node.Prefix.Add("switch (*pBuffer) {");
			node.Suffix.Add("    default:");
			node.Suffix.Add("        JsonHelper.ThrowPropertyNotFoundException((IntPtr)pBuffer, leftBufferSize);");
			node.Suffix.Add("        break;");
			node.Suffix.Add("}");
		}

		private void ProcessCase(AstCase node) {
			var sb = new StringBuilder();
			sb.Append("case (byte)'");
			sb.Append((char)node.ParseNode.Match);
			sb.Append("':");
			node.Prefix.Add(sb.ToString());

			if (node.ParseNode.Match == (byte)' ') {
				node.Prefix.Add("case (byte)'\"':");
			}

			node.Prefix.Add("    tmpBuffer = pBuffer;");
			node.Prefix.Add("    tmpLeftSize = leftBufferSize;");

			// Skip the character we switched on.
			node.Prefix.Add("    pBuffer++;");
			node.Prefix.Add("    leftBufferSize--;");

			node.Suffix.Add("   break;");
		}

		private void ProcessVerifier(AstVerifier node) {
			int numberToVerify;
			int verifyOffset;

			if (!node.ShouldVerify)
				return;

			verifyOffset = node.VerifyStart;
			numberToVerify = node.VerifyCount;

			if (numberToVerify > 0) {
				var compareBytes = numberToVerify;

				int handlerIndex = FindTemplateIndex(node.ParseNode);
				if (handlerIndex != -1) {
					node.Prefix.Add("pver = ((byte*)PointerVerificationBytes + VerificationOffset" + handlerIndex + " + " + verifyOffset + ");");
				}

				while (compareBytes >= 8) {
					node.Prefix.Add("leftBufferSize -= 8;");
					node.Prefix.Add("if (leftBufferSize < 0 || (*(UInt64*)pBuffer) != (*(UInt64*)pver) )");
					AddException(node);
					node.Prefix.Add("pBuffer += 8;");
					node.Prefix.Add("pver += 8;");
					compareBytes -= 8;
				}
				if (compareBytes >= 4) {
					node.Prefix.Add("leftBufferSize -= 4;");
					node.Prefix.Add("if (leftBufferSize < 0 || (*(UInt32*)pBuffer) !=  (*(UInt32*)pver) )");
					AddException(node);
					node.Prefix.Add("pBuffer += 4;");
					node.Prefix.Add("pver += 4;");
					compareBytes -= 4;
				}
				if (compareBytes >= 2) {
					node.Prefix.Add("leftBufferSize -= 2;");
					node.Prefix.Add("if (leftBufferSize < 0 || (*(UInt16*)pBuffer) != (*(UInt16*)pver) )");
					AddException(node);
					node.Prefix.Add("pBuffer += 2;");
					node.Prefix.Add("pver += 2;");
					compareBytes -= 2;
				}
				if (compareBytes >= 1) {
					node.Prefix.Add("leftBufferSize --;");
					node.Prefix.Add("if (leftBufferSize < 0 || (*pBuffer) != (*pver) )");
					AddException(node);
					node.Prefix.Add("pBuffer++;");
					node.Prefix.Add("pver++;");
				}
			}
		}

		private void AddException(AstBase node) {
			node.Prefix.Add("    JsonHelper.ThrowPropertyNotFoundException((IntPtr)tmpBuffer, tmpLeftSize);");
		}

		private int FindTemplateIndex(ParseNode node) {
			int templateIndex = -1;

			if (node.TemplateIndex != -1) {
				templateIndex = node.TemplateIndex;
			} else {
				foreach (ParseNode candidate in node.Candidates) {
					templateIndex = FindTemplateIndex(candidate);
					if (templateIndex != -1)
						break;
				}
			}
			return templateIndex;
		}

		private void ProcessProperty(AstJsonProperty node) {
			Template template = node.Template;

			if (template is TObject) {
				ProcessReadObject(node, template);
			} else if (template is TObjArr) {
				ProcessReadObjectArray(node, template);
			} else if (template is TTrigger) {
				ProcessReadTrigger(node, template);
			} else {
				ProcessReadPrimitive(node, template);
			}

			node.Prefix.Add("// TODO! Parse value for " + node.Template.JsonType);
		}

		private void ProcessReadPrimitive(AstJsonProperty node, Template template) {
			string valueName = " val" + node.ParseNode.TemplateIndex;

			node.Prefix.Add(template.InstanceType.Name + valueName + ";");
			node.Prefix.Add("if (JsonHelper." + GetParseFunctionName(template) + "((IntPtr)pBuffer, leftBufferSize, out" + valueName + ", out valueSize)) {");
			node.Prefix.Add("    obj." + template.PropertyName + " =" + valueName + ";");
			GenerateBufferJumpCode(node);
			GenerateElseExceptionCode(node, template);
		}

		private void ProcessReadTrigger(AstJsonProperty node, Template template) {
			node.Prefix.Add("if (JsonHelper.IsNullValue((IntPtr)pBuffer, leftBufferSize, out valueSize)) {");
			GenerateBufferJumpCode(node);
			GenerateElseExceptionCode(node, template);
		}

		private void ProcessReadObjectArray(AstJsonProperty node, Template template) {
			string valueName = " val" + node.ParseNode.TemplateIndex;

			node.Prefix.Add("if (*pBuffer != '[')");
			node.Prefix.Add("    JsonHelper.ThrowWrongValueTypeException(null, \"" + template.TemplateName + "\", \"" + template.JsonType + "\", \"\");");
			node.Prefix.Add("while (leftBufferSize > 0) {");
			node.Prefix.Add("    while (*pBuffer != '{' && *pBuffer != ']') { // find first object or end of array");
			node.Prefix.Add("        leftBufferSize--;");
			node.Prefix.Add("        if (leftBufferSize < 0)");
			node.Prefix.Add("            JsonHelper.ThrowUnexpectedEndOfContentException();");
			node.Prefix.Add("        pBuffer++;");
			node.Prefix.Add("    }");
			node.Prefix.Add("    if (*pBuffer == ']')");
			node.Prefix.Add("        break;");
			
			node.Prefix.Add("    var" + valueName + " = obj." + template.PropertyName + ".Add();");
			node.Prefix.Add("    valueSize = " + valueName + ".PopulateFromJson((IntPtr)pBuffer, leftBufferSize, settings);");
			node.Prefix.Add("    if (valueSize != -1) {");
			GenerateBufferJumpCode(node);
			GenerateElseExceptionCode(node, template);

			node.Suffix.Add("}");
			node.Suffix.Add("if (*pBuffer == ']') {");
			node.Suffix.Add("    leftBufferSize--;");
			node.Suffix.Add("    if (leftBufferSize < 0)");
			node.Suffix.Add("        JsonHelper.ThrowUnexpectedEndOfContentException();");
			node.Suffix.Add("    pBuffer++;");
			node.Suffix.Add("}");
		}

		private void ProcessReadObject(AstJsonProperty node, Template template) {
			string valueName = " val" + node.ParseNode.TemplateIndex;

			node.Prefix.Add("var" + valueName + " = obj." + template.PropertyName + ";");
			node.Prefix.Add("valueSize = " + valueName + ".PopulateFromJson((IntPtr)pBuffer, leftBufferSize, settings);");
			node.Prefix.Add("if (valueSize != -1) {");
			GenerateBufferJumpCode(node);
			GenerateElseExceptionCode(node, template);
		}

		private void GenerateBufferJumpCode(AstBase node) {
			node.Prefix.Add("    leftBufferSize -= valueSize;");
			node.Prefix.Add("    if (leftBufferSize < 0) {");
			node.Prefix.Add("        JsonHelper.ThrowUnexpectedEndOfContentException();");
			node.Prefix.Add("    }");
			node.Prefix.Add("    pBuffer += valueSize;");
		}

		private void GenerateElseExceptionCode(AstBase node, Template template) {
			node.Prefix.Add("} else {");
			node.Prefix.Add("    JsonHelper.ThrowWrongValueTypeException(null, \"" + template.TemplateName + "\", \"" + template.JsonType + "\", \"\");");
			node.Prefix.Add("}");
		}

		private string GetParseFunctionName(Template template) {
			string parseFunction = null;

			if (template is TString) {
				parseFunction = "ParseString";
			} else if (template is TLong) {
				parseFunction = "ParseInt";
			} else if (template is TDecimal) {
				parseFunction = "ParseDecimal";
			} else if (template is TDouble) {
				parseFunction = "ParseDouble";
			} else if (template is TBool) {
				parseFunction = "ParseBoolean";
			} else {
				throw new NotSupportedException();
			}
			return parseFunction;
		}


		#region unused serializer code
		//private void AstReturn() {
			//Prefix.Add("buffer = apa;");
			//Prefix.Add("return offset;");
		//}

		//private void AstCheckAlreadyProcessed() {
			//Prefix.Add("if (templateNo <= " + Index + ") {");
			//Suffix.Add("    templateNo++;");
			//Suffix.Add("    nameWritten = false;");
			//Suffix.Add("}");
		//}

		//private void AstRecreateBuffer() {
			//Prefix.Add("if (recreateBuffer) {");
			//Prefix.Add("    int oldSize = apa.Length;");
			//Prefix.Add("    apa = IncreaseCapacity(apa, offset, valueSize);");
			//Prefix.Add("    bufferSize = apa.Length;");
			//Prefix.Add("}");
			//Prefix.Add("recreateBuffer = true;");
		//}

		//private void AstObjectArrayValue() {
			//Prefix.Add("arr = obj." + Template.PropertyName + ";");
			//Prefix.Add("if (bufferSize < (offset + arr.Count * 2 + 2))");
			//Prefix.Add("    goto restart;");
			//Prefix.Add("if (posInArray == -1) {");
			//Prefix.Add("    offset++;");
			//Prefix.Add("    *buf++ = (byte)'[';");
			//Prefix.Add("    posInArray = 0;");
			//Prefix.Add("}");
			//Prefix.Add("for (int arrPos = posInArray; arrPos < arr.Count; arrPos++) {");
			//Prefix.Add("    if (childObjArr == null) {");
			//Prefix.Add("        valueSize = arr[arrPos].ToJsonUtf8(out childObjArr);");
			//Prefix.Add("        if (valueSize == -1)");
			//Prefix.Add("            goto restart;");
			//Prefix.Add("        if (bufferSize < (offset + valueSize + 1))");
			//Prefix.Add("            goto restart;");
			//Prefix.Add("    }");
			//Prefix.Add("    Buffer.BlockCopy(childObjArr, 0, apa, offset, valueSize);");
			//Prefix.Add("    childObjArr = null;");
			//Prefix.Add("    offset += valueSize;");
			//Prefix.Add("    buf += valueSize;");
			//Prefix.Add("    posInArray++;");
			//Prefix.Add("    if ((arrPos + 1) < arr.Count) {");
			//Prefix.Add("        offset++;");
			//Prefix.Add("        *buf++ = (byte)',';");
			//Prefix.Add("    }");
			//Prefix.Add("}");
			//Prefix.Add("offset++;");
			//Prefix.Add("*buf++ = (byte)']';");
			//Prefix.Add("posInArray = -1;");
		//}

		//private void AstObjectValue() {
			//Prefix.Add("if (childObjArr == null) {");
			//Prefix.Add("    childObj = obj." + Template.PropertyName + ";");
			//Prefix.Add("    if (childObj != null) {");
			//Prefix.Add("        valueSize = childObj.ToJsonUtf8(out childObjArr);");
			//Prefix.Add("    } else {");
			//Prefix.Add("        valueSize = JsonHelper.WriteNull((IntPtr)buf, bufferSize - offset);");
			//Prefix.Add("        if (valueSize == -1)");
			//Prefix.Add("            goto restart;");
			//Prefix.Add("    }");
			//Prefix.Add("}");
			//Prefix.Add("if (valueSize != -1 && childObjArr != null) {");
			//Prefix.Add("    if (bufferSize < (offset + valueSize + 1))");
			//Prefix.Add("        goto restart;");
			//Prefix.Add("    Buffer.BlockCopy(childObjArr, 0, apa, offset, valueSize);");
			//Prefix.Add("    offset += valueSize;");
			//Prefix.Add("    buf += valueSize;");
			//Prefix.Add("    childObjArr = null;");
			//Prefix.Add("} else");
			//Prefix.Add("    goto restart;");
		//}

		//private void AstPrimitiveValue() {
			//Prefix.Add("valueSize = " + GetWriteFunction(Template));
			//Prefix.Add("if (valueSize == -1)");
			//Prefix.Add("    goto restart;");
			//Prefix.Add("if (bufferSize < (offset + 1))");
			//Prefix.Add("    goto restart;");
			//Prefix.Add("offset += valueSize;");
			//Prefix.Add("buf += valueSize;");
		//}

		//private string GetWriteFunction(Template template) {
		//	string parseFunction = null;

		//	if (template is TString) {
		//		parseFunction = "JsonHelper.WriteString((IntPtr)buf, bufferSize - offset, obj." + Template.PropertyName + ");";
		//	} else if (template is TLong) {
		//		parseFunction = "JsonHelper.WriteInt((IntPtr)buf, bufferSize - offset, obj." + Template.PropertyName + ");";
		//	} else if (template is TDecimal) {
		//		parseFunction = "JsonHelper.WriteDecimal((IntPtr)buf, bufferSize - offset, obj." + Template.PropertyName + ");";
		//	} else if (template is TDouble) {
		//		parseFunction = "JsonHelper.WriteDouble((IntPtr)buf, bufferSize - offset, obj." + Template.PropertyName + ");";
		//	} else if (template is TBool) {
		//		parseFunction = "JsonHelper.WriteBool((IntPtr)buf, bufferSize - offset, obj." + Template.PropertyName + ");";
		//	} else if (template is TTrigger) {
		//		parseFunction = "JsonHelper.WriteNull((IntPtr)buf, bufferSize - offset);";
		//	} else {
		//		throw new NotSupportedException();
		//	}

		//	return parseFunction;
		//}

		//private void AstJsonProperty_write() {
			//Prefix.Add("if (!nameWritten) {");
			//Prefix.Add("    valueSize = JsonHelper.WriteString((IntPtr)buf, bufferSize - offset, \"" + Template.TemplateName + "\");");
			//Prefix.Add("    if (valueSize == -1)");
			//Prefix.Add("        goto restart;");
			//Prefix.Add("    if (bufferSize < (offset + valueSize + 1))");
			//Prefix.Add("        goto restart;");
			//Prefix.Add("    nameWritten = true;");
			//Prefix.Add("    offset += valueSize + 1;");
			//Prefix.Add("    buf += valueSize;");
			//Prefix.Add("    *buf++ = (byte)':';");
			//Prefix.Add("}");
		//}

		//private void AstJsonDelimiter() {
			//Prefix.Add("offset++;");
			//Prefix.Add("*buf++ = (byte)'" + Delimiter + "';");
		//}

		//private void AstFixed() {
			//Prefix.Add("fixed (byte* p = &apa[offset]) {");
			//Prefix.Add("    byte* buf = p;");
			//Suffix.Add("}");
		//}

		//private void AstSerializer() {
			//Prefix.Add("");
			//Prefix.Add("public override int ToJsonUtf8(Obj realObj, out byte[] buffer) {");
			//Prefix.Add("    Arr arr;");
			//Prefix.Add("    bool nameWritten = false;");
			//Prefix.Add("    bool recreateBuffer = false;");
			//Prefix.Add("    byte[] childObjArr = null;");
			//Prefix.Add("    dynamic obj = realObj;");
			//Prefix.Add("    int templateNo = 0;");
			//Prefix.Add("    int posInArray = -1;");
			//Prefix.Add("    int valueSize = -1;");
			//Prefix.Add("    int bufferSize = 512;");
			//Prefix.Add("    Obj childObj;");
			//Prefix.Add("    Template tProperty;");
			//Prefix.Add("    Schema tObj = realObj.Template;");
			//Prefix.Add("    byte[] apa = new byte[bufferSize];");
			//Prefix.Add("    int offset = 1;");

			//Prefix.Add("    apa[0] = (byte)'{';");
			//Prefix.Add("    unsafe {");

			//Suffix.Add("    }");
			//Suffix.Add("}");
		//}

		//private void AstDeserializer() {
			//Prefix.Add("public override int Populate(Json json, IntPtr buffer, int bufferSize) {");
			//Prefix.Add("    int valueSize;");
			//Prefix.Add("    dynamic obj = json;");
			//Suffix.Add("}");
		//}

		//private void AstFail() {
//			Prefix.Add("throw ErrorCode.ToException(Starcounter.Internal.Error.SCERRUNSPECIFIED, \"char: '\" + (char)*pBuffer + \"', offset: \" + (bufferSize - leftBufferSize) + \"\");");
		//}
		#endregion
	}
}
