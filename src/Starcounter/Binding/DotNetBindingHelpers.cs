
namespace Starcounter.Binding {
    /// <summary>
    /// Expose some utility code used when binding .NET code to
    /// Starcounter.
    /// </summary>
    public static class DotNetBindingHelpers {
        /// <summary>
        /// Expose utility code for binding stuff relating to the
        /// C# langauge.
        /// </summary>
        public static class CSharp {
            const string BackingFieldTemplate = "<{0}>k_BackingField";

            /// <summary>
            /// Gets the name of the backing field generated by the C# compiler
            /// to back up an auto-implemented property, given it's property name.
            /// </summary>
            /// <param name="propertyName">The name of the property whose backing
            /// field name should be returned.</param>
            /// <returns>The backing field name for the given property.</returns>
            public static string GetAutoImplementedBackingFieldName(string propertyName) {
                return string.Format(CSharp.BackingFieldTemplate, propertyName);
            }

            /// <summary>
            /// Gets the washed property name from a given backing field name,
            /// emitted by the compiler for an auto-implemented property.
            /// </summary>
            /// <remarks>
            /// If the backing field name supplied doesn't match the decoration
            /// used for backing fields, the name is returned as-is.
            /// </remarks>
            /// <param name="backingFieldName">The backing field name.</param>
            /// <returns>The name of the auto-implemented property being backed.
            /// </returns>
            public static string BackingFieldNameToPropertyName(string backingFieldName) {
                if (backingFieldName[0] == '<') {
                    backingFieldName = backingFieldName.Substring(1, backingFieldName.IndexOf('>') - 1);
                }
                return backingFieldName;
            }
        }
    }
}