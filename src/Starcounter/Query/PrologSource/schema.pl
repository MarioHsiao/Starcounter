:- multifile schemafile/1, class/3, extension/3, property/4, method/5, gmethod/6.
:- dynamic schemafile/1, class/3, extension/3, property/4, method/5, gmethod/6.
:- assert(schemafile('schema.pl')).

:- assert(class(fullclassNameUpper,fullclassName,baseclassName)).
:- assert(class(shortclassNameUpper,fullclassName,baseclassName)).
:- assert(class('STARCOUNTER.ENTITY','Starcounter.Entity','none')).
:- assert(class('ENTITY','Starcounter.Entity','none')).
:- assert(class('STARCOUNTER.USERDOMAIN','Starcounter.UserDomain','Starcounter.Entity')).
:- assert(class('USERDOMAIN','Starcounter.UserDomain','Starcounter.Entity')).
:- assert(class('STARCOUNTER.USER','Starcounter.User','Starcounter.Entity')).
:- assert(class('EXAMPLE2.PERSON','Example2.Person','Starcounter.Entity')).
:- assert(class('PERSON','Example2.Person','Starcounter.Entity')).
:- assert(class('EXAMPLE.LOCATION','Example.Location','Starcounter.Entity')).
:- assert(class('LOCATION','Example.Location','Starcounter.Entity')).
:- assert(class('EXAMPLE.DEPARTMENT','Example.Department','Starcounter.Entity')).
:- assert(class('DEPARTMENT','Example.Department','Starcounter.Entity')).
:- assert(class('EXAMPLE.PERSON','Example.Person','Starcounter.Entity')).
:- assert(class('PERSON','Example.Person','Starcounter.Entity')).
:- assert(class('EXAMPLE.EMPLOYEE','Example.Employee','Example.Person')).
:- assert(class('EMPLOYEE','Example.Employee','Example.Person')).
:- assert(extension(fullclassName,fullextensionNameUpper,fullextensionName)).
:- assert(extension(fullclassName,shortextensionNameUpper,fullextensionName)).
:- assert(extension('Example.Person','EXAMPLE.MYPERSON','Example.MyPerson')).
:- assert(extension('Example.Person','MYPERSON','Example.MyPerson')).
:- assert(extension('Example.Employee','EXAMPLE.MYPERSON','Example.MyPerson')).
:- assert(extension('Example.Employee','MYPERSON','Example.MyPerson')).
:- assert(property(fullclassName,propertyNameUpper,propertyName,propertyType)).
:- assert(property(fullextensionName,propertyNameUpper,propertyName,propertyType)).
:- assert(property('Starcounter.UserDomain','NAME','Name','String')).
:- assert(property('Starcounter.User','CULTURE','Culture','String')).
:- assert(property('Starcounter.User','DOMAIN','Domain','Starcounter.UserDomain')).
:- assert(property('Starcounter.User','ISENABLED','IsEnabled','Boolean')).
:- assert(property('Starcounter.User','NAME','Name','String')).
:- assert(property('Starcounter.User','PASSWORD','Password','String')).
:- assert(property('Starcounter.User','HASPASSWORD','HasPassword','Boolean')).
:- assert(property('Example2.Person','NICKNAME','NickName','String')).
:- assert(property('Example.Location','NAME','Name','String')).
:- assert(property('Example.Location','DESCRIPTION','Description','String')).
:- assert(property('Example.Location','TYPE','Type','Int32')).
:- assert(property('Example.Department','NAME','Name','String')).
:- assert(property('Example.Department','DESCRIPTION','Description','String')).
:- assert(property('Example.Department','LOCATION','Location','Example.Location')).
:- assert(property('Example.Department','IDBINARY','IdBinary','Binary')).
:- assert(property('Example.Person','FIRSTNAME','FirstName','String')).
:- assert(property('Example.Person','LASTNAME','LastName','String')).
:- assert(property('Example.Person','_TEMP','_Temp','String')).
:- assert(property('Example.Person','HOME','Home','Example.Location')).
:- assert(property('Example.Person','FATHER','Father','Example.Person')).
:- assert(property('Example.Person','MOTHER','Mother','Example.Person')).
:- assert(property('Example.Employee','FIRSTNAME','FirstName','String')).
:- assert(property('Example.Employee','LASTNAME','LastName','String')).
:- assert(property('Example.Employee','_TEMP','_Temp','String')).
:- assert(property('Example.Employee','HOME','Home','Example.Location')).
:- assert(property('Example.Employee','FATHER','Father','Example.Person')).
:- assert(property('Example.Employee','MOTHER','Mother','Example.Person')).
:- assert(property('Example.Employee','HIREDATE','HireDate','DateTime')).
:- assert(property('Example.Employee','COMMISSION','Commission','Boolean')).
:- assert(property('Example.Employee','SALARYSBYTE','SalarySByte','SByte')).
:- assert(property('Example.Employee','SALARYINT16','SalaryInt16','Int16')).
:- assert(property('Example.Employee','SALARYINT32','SalaryInt32','Int32')).
:- assert(property('Example.Employee','SALARYINT64','SalaryInt64','Int64')).
:- assert(property('Example.Employee','SALARYBYTE','SalaryByte','Byte')).
:- assert(property('Example.Employee','SALARYUINT16','SalaryUInt16','UInt16')).
:- assert(property('Example.Employee','SALARYUINT32','SalaryUInt32','UInt32')).
:- assert(property('Example.Employee','SALARYUINT64','SalaryUInt64','UInt64')).
:- assert(property('Example.Employee','SALARYDECIMAL','SalaryDecimal','Decimal')).
:- assert(property('Example.Employee','SALARYSINGLE','SalarySingle','Single')).
:- assert(property('Example.Employee','SALARYDOUBLE','SalaryDouble','Double')).
:- assert(property('Example.Employee','MANAGER','Manager','Example.Employee')).
:- assert(property('Example.Employee','DEPARTMENT','Department','Example.Department')).
:- assert(property('Example.MyPerson','MYID','MyId','Int32')).
:- assert(property('Example.MyPerson','MYNAME','MyName','String')).
:- assert(property('Example.MyPerson','STARTDATE','StartDate','DateTime')).
:- assert(property('Example.MyPerson','ENDDATE','EndDate','DateTime')).
:- assert(method(fullName,methodNameUpper,methodName,argumentTypes,returnType)).
:- assert(method('Starcounter.Entity','EQUALSORISDERIVEDFROM','EqualsOrIsDerivedFrom',['Starcounter.IObjectView'],'Boolean')).
:- assert(method('Starcounter.UserDomain','EQUALSORISDERIVEDFROM','EqualsOrIsDerivedFrom',['Starcounter.IObjectView'],'Boolean')).
:- assert(method('Starcounter.User','EQUALSORISDERIVEDFROM','EqualsOrIsDerivedFrom',['Starcounter.IObjectView'],'Boolean')).
:- assert(method('Example2.Person','EQUALSORISDERIVEDFROM','EqualsOrIsDerivedFrom',['Starcounter.IObjectView'],'Boolean')).
:- assert(method('Example.Location','EQUALSORISDERIVEDFROM','EqualsOrIsDerivedFrom',['Starcounter.IObjectView'],'Boolean')).
:- assert(method('Example.Department','EQUALSORISDERIVEDFROM','EqualsOrIsDerivedFrom',['Starcounter.IObjectView'],'Boolean')).
:- assert(method('Example.Person','EQUALSORISDERIVEDFROM','EqualsOrIsDerivedFrom',['Starcounter.IObjectView'],'Boolean')).
:- assert(method('Example.Employee','EQUALSORISDERIVEDFROM','EqualsOrIsDerivedFrom',['Starcounter.IObjectView'],'Boolean')).
:- assert(gmethod(fullName,methodNameUpper,methodName,typeParameters,argumentTypes,returnType)).
:- assert(gmethod('Example.Person','GETEXTENSION','GetExtension',['Example.MyPerson'],[],'Example.MyPerson')).
:- assert(gmethod('Example.Employee','GETEXTENSION','GetExtension',['Example.MyPerson'],[],'Example.MyPerson')).
