(function (a) { function g(a) { Error.call(this, a); this.message = a } function h(a) { Error.call(this, a); this.message = a } function i(a, b, c) { return function (d) { return b.call(a, d, c) } } var b, c, d, e, f; f = Array.isArray || function (a) { return Object.prototype.toString.call(a) == "[object Array]" }; a.apply_patch = b = function (a, b) { return (new c(b)).apply(a) }; a.InvalidPatch = g; g.prototype = new Error; a.PatchApplyError = h; h.prototype = new Error; a.JSONPointer = d = function (b) { var c, d, e = []; d = b.split("/"); if ("" !== d[0]) { throw new g("JSONPointer must start with a slash (or be an empty string)!") } for (c = 1; c < d.length; c++) { e[c - 1] = decodeURIComponent(d[c]) } this.path = e; this.length = e.length }; d.prototype._get_segment = function (a, b) { var c = this.path[a]; if (f(b)) { c = parseInt(c, 10); if (isNaN(c) || c < 0) { throw new h("Expected a number to segment an array") } } return c }; d.prototype._action = function (a, b) { var c, d; for (c = 0; c < this.length - 1; c++) { d = this._get_segment(c, a); if (!Object.hasOwnProperty.call(a, d)) { throw new h("Path not found in document") } a = a[d] } return b(a, this._get_segment(this.length - 1, a)) }; d.prototype.add = function (a, b) { if (0 === this.length) { if ("undefined" === typeof a) { return b } else { throw new h("Add operation must not point to an existing value!") } } return this._action(a, function (c, d) { if (f(c)) { if (d > c.length) { throw new h("Add operation must not attempt to create a sparse array!") } c.splice(d, 0, b) } else { if (Object.hasOwnProperty.call(c, d)) { throw new h("Add operation must not point to an existing value!") } c[d] = b } return a }) }; d.prototype.remove = function (a) { if (0 === this.length) { return undefined } return this._action(a, function (b, c) { if (!Object.hasOwnProperty.call(b, c)) { throw new h("Remove operation must point to an existing value!") } if (f(b)) { b.splice(c, 1) } else { delete b[c] } return a }) }; d.prototype.replace = function (a, b) { return this.add(this.remove(a), b) }; d.prototype.get = function (a, b) { return this._action(a, function (a, b) { return a[b] }) }; e = { add: d.prototype.add, remove: d.prototype.remove, replace: d.prototype.replace }; a.JSONPatch = c = function (b) { this._compile(b) }; c.prototype._compile = function (a) { var b, c, h, j, k, l, m; this.compiledOps = []; if ("string" === typeof a) { a = JSON.parse(a) } if (!f(a)) { throw new g("Patch must be an array of operations") } for (b = 0; b < a.length; b++) { j = null; for (h in a[b]) { if (e.hasOwnProperty(h)) { if (j) { throw new g("Only one operation allowed per block!") } j = h; k = a[b][j] } else if ("value" !== h) { if (Object.hasOwnProperty.call(a[b], h)) { throw new g("Invalid operation!") } } } if (null === j) { throw new g("Operation missing!") } l = a[b].value; if ("remove" === j && "undefined" !== typeof l) { throw new g('"remove" operation should not have a "value"!') } else if ("remove" !== j && "undefined" === typeof l) { throw new g('"' + j + '" operation should have a "value"!') } m = new d(k); this.compiledOps[b] = i(m, e[j], l) } }; a.JSONPatch.prototype.apply = function (a) { var b; for (b = 0; b < this.compiledOps.length; b++) { a = this.compiledOps[b](a) } return a } })("object" === typeof module ? module.exports : window.jsonpatch = {})